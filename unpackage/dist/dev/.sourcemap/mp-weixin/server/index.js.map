{"version":3,"file":"index.js","sources":["server/index.ts"],"sourcesContent":["export const request = <T>({\r\n\tmethod = 'POST',\r\n\turl,\r\n\tdata,\r\n\tcallback\r\n} : {\r\n\tmethod ?: \"POST\" | \"GET\",\r\n\turl : string,\r\n\tdata ?: Object,\r\n\tcallback ?: (data : T) => void\r\n}) : Promise<T> => {\r\n\ttry {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\twx.request({\r\n\t\t\t\turl,\r\n\t\t\t\tmethod,\r\n\t\t\t\tdata,\r\n\t\t\t\tsuccess: (res) => {\r\n\t\t\t\t\t// 将 res.data 显式断言为 T 类型\r\n\t\t\t\t\tresolve(res.data as T); // 这里假设响应数据的类型是 T\r\n\t\t\t\t\tcallback && callback(res.data as T); // 调用回调时也进行类型断言\r\n\t\t\t\t},\r\n\t\t\t\tfail: (error) => {\r\n\t\t\t\t\treject(error);\r\n\t\t\t\t\tcallback && callback(error as any); // 这里可以根据实际情况处理错误\r\n\t\t\t\t},\r\n\t\t\t\tcomplete: () => { }\r\n\t\t\t});\r\n\t\t});\r\n\t} catch (error) {\r\n\t\treturn Promise.reject(error);\r\n\t}\r\n}"],"names":["wx"],"mappings":";;AAAO,MAAM,UAAU,CAAI;AAAA,EAC1B,SAAS;AAAA,EACT;AAAA,EACA;AAAA,EACA;AACD,MAKmB;AACd,MAAA;AACH,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvCA,oBAAAA,KAAG,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,CAAC,QAAQ;AAEjB,kBAAQ,IAAI,IAAS;AACT,sBAAA,SAAS,IAAI,IAAS;AAAA,QACnC;AAAA,QACA,MAAM,CAAC,UAAU;AAChB,iBAAO,KAAK;AACZ,sBAAY,SAAS,KAAY;AAAA,QAClC;AAAA,QACA,UAAU,MAAM;AAAA,QAAE;AAAA,MAAA,CAClB;AAAA,IAAA,CACD;AAAA,WACO,OAAO;AACR,WAAA,QAAQ,OAAO,KAAK;AAAA,EAC5B;AACD;;"}