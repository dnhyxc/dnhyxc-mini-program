{"version":3,"file":"parser.js","sources":["pages/detail/parser.ts"],"sourcesContent":["import { marked } from 'marked'\r\nimport hljs from 'highlight.js';\r\n// import javascript from 'highlight.js/lib/languages/javascript'\r\n// import typescript from 'highlight.js/lib/languages/typescript'\r\n// import python from 'highlight.js/lib/languages/python'\r\n// import java from 'highlight.js/lib/languages/java'\r\n// import csharp from 'highlight.js/lib/languages/csharp'\r\n// import bash from 'highlight.js/lib/languages/bash'\r\n// import sql from 'highlight.js/lib/languages/sql'\r\n// import json from 'highlight.js/lib/languages/json'\r\n// import xml from 'highlight.js/lib/languages/xml'\r\n// // import katex from 'katex';\r\n// // import DOMPurify from 'dompurify';\r\n// // import mermaid from 'mermaid';\r\n\r\n// // 注册语言支持\r\n// hljs.registerLanguage('javascript', javascript)\r\n// hljs.registerLanguage('typescript', typescript)\r\n// hljs.registerLanguage('python', python)\r\n// hljs.registerLanguage('java', java)\r\n// hljs.registerLanguage('csharp', csharp)\r\n// hljs.registerLanguage('bash', bash)\r\n// hljs.registerLanguage('sql', sql)\r\n// hljs.registerLanguage('json', json)\r\n// hljs.registerLanguage('xml', xml)\r\n\r\n// const render = new marked.Renderer()\r\n// marked.setOptions({\r\n// \trenderer: render,\r\n// \tgfm: true,\r\n// \tpedantic: false,\r\n// })\r\n\r\n// const tokenizer = {\r\n// \tcodespan(src) {\r\n// \t\tconst match = src.match(/^\\$+([^\\$\\n]+?)\\$+/);\r\n// \t\tif (match) {\r\n// \t\t\treturn {\r\n// \t\t\t\ttype: 'codespan',\r\n// \t\t\t\traw: match[0],\r\n// \t\t\t\ttext: match[1].trim()\r\n// \t\t\t};\r\n// \t\t}\r\n\r\n// \t\t// return false to use original codespan tokenizer\r\n// \t\treturn false;\r\n// \t}\r\n// };\r\n\r\n// const renderer = {\r\n// \tcode({ text, lang } : { text : string, lang : string }) {\r\n// \t\tif (lang && hljs.getLanguage(lang)) {\r\n// \t\t\ttry {\r\n// \t\t\t\tconsole.log(text, 'codecodecodecodecodecode', lang, hljs.highlight(text, { language: lang }).value)\r\n// \t\t\t\treturn `<pre><code class=\"hljs language-${lang}\">${hljs.highlight(text, { language: lang }).value}</code></pre>`;\r\n// \t\t\t} catch (e) {\r\n// \t\t\t\tconsole.error(e);\r\n// \t\t\t}\r\n// \t\t}\r\n// \t\treturn `<pre><code class=\"hljs\">${hljs.highlightAuto(text).value}</code></pre>`;\r\n// \t},\r\n// };\r\n\r\n// marked.use({ renderer });\r\n\r\nmarked.setOptions({\r\n\tpedantic: false,\r\n\tgfm: true,\r\n\tbreaks: false,\r\n\trenderer: new marked.Renderer(),\r\n});\r\n\r\nexport const parserMarkdown = (markdown: string) => {\r\n\treturn marked.parse(markdown)\r\n}\r\n\r\n\r\n// // utils/markdownParser.js\r\n// const towxml = require('../../wxcomponents/towxml/index.js')\r\n\r\n// // 初始化 Towxml（配置高亮、表情等）\r\n// // const towxml = new Towxml({\r\n// // \tbase: 'https://your-cdn.com',  // 静态资源 CDN（如图片）\r\n// // \ttheme: 'light',                // 主题：light/dark\r\n// // \tevents: {}                     // 自定义事件（如点击回调）\r\n// // });\r\n\r\n// export function parseMarkdown(content : string) {\r\n// \treturn towxml(content, 'markdown');\r\n// }"],"names":["marked"],"mappings":";;AAiEAA,cAAA,OAAO,WAAW;AAAA,EACjB,UAAU;AAAA,EACV,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,UAAU,IAAIA,cAAA,OAAO,SAAS;AAC/B,CAAC;AAEY,MAAA,iBAAiB,CAAC,aAAqB;AAC5C,SAAAA,cAAA,OAAO,MAAM,QAAQ;AAC7B;;"}