{"version":3,"file":"Parser.js","sources":["wxcomponents/towxml/parse/parse2/Parser.js"],"sourcesContent":["var Tokenizer_js_1 = require(\"./Tokenizer.js\");\nvar decode_js_1 = require(\"./entities/decode.js\");\nvar formTags = new Set([\n    \"input\",\n    \"option\",\n    \"optgroup\",\n    \"select\",\n    \"button\",\n    \"datalist\",\n    \"textarea\",\n]);\nvar pTag = new Set([\"p\"]);\nvar tableSectionTags = new Set([\"thead\", \"tbody\"]);\nvar ddtTags = new Set([\"dd\", \"dt\"]);\nvar rtpTags = new Set([\"rt\", \"rp\"]);\nvar openImpliesClose = new Map([\n    [\"tr\", new Set([\"tr\", \"th\", \"td\"])],\n    [\"th\", new Set([\"th\"])],\n    [\"td\", new Set([\"thead\", \"th\", \"td\"])],\n    [\"body\", new Set([\"head\", \"link\", \"script\"])],\n    [\"li\", new Set([\"li\"])],\n    [\"p\", pTag],\n    [\"h1\", pTag],\n    [\"h2\", pTag],\n    [\"h3\", pTag],\n    [\"h4\", pTag],\n    [\"h5\", pTag],\n    [\"h6\", pTag],\n    [\"select\", formTags],\n    [\"input\", formTags],\n    [\"output\", formTags],\n    [\"button\", formTags],\n    [\"datalist\", formTags],\n    [\"textarea\", formTags],\n    [\"option\", new Set([\"option\"])],\n    [\"optgroup\", new Set([\"optgroup\", \"option\"])],\n    [\"dd\", ddtTags],\n    [\"dt\", ddtTags],\n    [\"address\", pTag],\n    [\"article\", pTag],\n    [\"aside\", pTag],\n    [\"blockquote\", pTag],\n    [\"details\", pTag],\n    [\"div\", pTag],\n    [\"dl\", pTag],\n    [\"fieldset\", pTag],\n    [\"figcaption\", pTag],\n    [\"figure\", pTag],\n    [\"footer\", pTag],\n    [\"form\", pTag],\n    [\"header\", pTag],\n    [\"hr\", pTag],\n    [\"main\", pTag],\n    [\"nav\", pTag],\n    [\"ol\", pTag],\n    [\"pre\", pTag],\n    [\"section\", pTag],\n    [\"table\", pTag],\n    [\"ul\", pTag],\n    [\"rt\", rtpTags],\n    [\"rp\", rtpTags],\n    [\"tbody\", tableSectionTags],\n    [\"tfoot\", tableSectionTags],\n]);\nvar voidElements = new Set([\n    \"area\",\n    \"base\",\n    \"basefont\",\n    \"br\",\n    \"col\",\n    \"command\",\n    \"embed\",\n    \"frame\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"isindex\",\n    \"keygen\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\",\n]);\nvar foreignContextElements = new Set([\"math\", \"svg\"]);\nvar htmlIntegrationElements = new Set([\n    \"mi\",\n    \"mo\",\n    \"mn\",\n    \"ms\",\n    \"mtext\",\n    \"annotation-xml\",\n    \"foreignobject\",\n    \"desc\",\n    \"title\",\n]);\nvar reNameEnd = /\\s|\\//;\nvar Parser = /** @class */ (function () {\n    function Parser(cbs, options) {\n        if (options === void 0) { options = {}; }\n        var _a, _b, _c, _d, _e;\n        this.options = options;\n        /** The start index of the last event. */\n        this.startIndex = 0;\n        /** The end index of the last event. */\n        this.endIndex = 0;\n        /**\n         * Store the start index of the current open tag,\n         * so we can update the start index for attributes.\n         */\n        this.openTagStart = 0;\n        this.tagname = \"\";\n        this.attribname = \"\";\n        this.attribvalue = \"\";\n        this.attribs = null;\n        this.stack = [];\n        this.foreignContext = [];\n        this.buffers = [];\n        this.bufferOffset = 0;\n        /** The index of the last written buffer. Used when resuming after a `pause()`. */\n        this.writeIndex = 0;\n        /** Indicates whether the parser has finished running / `.end` has been called. */\n        this.ended = false;\n        this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};\n        this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;\n        this.lowerCaseAttributeNames =\n            (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;\n        this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_js_1.default)(this.options, this);\n        (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);\n    }\n    // Tokenizer event handlers\n    /** @internal */\n    Parser.prototype.ontext = function (start, endIndex) {\n        var _a, _b;\n        var data = this.getSlice(start, endIndex);\n        this.endIndex = endIndex - 1;\n        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);\n        this.startIndex = endIndex;\n    };\n    /** @internal */\n    Parser.prototype.ontextentity = function (cp) {\n        var _a, _b;\n        /*\n         * Entities can be emitted on the character, or directly after.\n         * We use the section start here to get accurate indices.\n         */\n        var idx = this.tokenizer.getSectionStart();\n        this.endIndex = idx - 1;\n        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, (0, decode_js_1.fromCodePoint)(cp));\n        this.startIndex = idx;\n    };\n    Parser.prototype.isVoidElement = function (name) {\n        return !this.options.xmlMode && voidElements.has(name);\n    };\n    /** @internal */\n    Parser.prototype.onopentagname = function (start, endIndex) {\n        this.endIndex = endIndex;\n        var name = this.getSlice(start, endIndex);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        this.emitOpenTag(name);\n    };\n    Parser.prototype.emitOpenTag = function (name) {\n        var _a, _b, _c, _d;\n        this.openTagStart = this.startIndex;\n        this.tagname = name;\n        var impliesClose = !this.options.xmlMode && openImpliesClose.get(name);\n        if (impliesClose) {\n            while (this.stack.length > 0 &&\n                impliesClose.has(this.stack[this.stack.length - 1])) {\n                var el = this.stack.pop();\n                (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, el, true);\n            }\n        }\n        if (!this.isVoidElement(name)) {\n            this.stack.push(name);\n            if (foreignContextElements.has(name)) {\n                this.foreignContext.push(true);\n            }\n            else if (htmlIntegrationElements.has(name)) {\n                this.foreignContext.push(false);\n            }\n        }\n        (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);\n        if (this.cbs.onopentag)\n            this.attribs = {};\n    };\n    Parser.prototype.endOpenTag = function (isImplied) {\n        var _a, _b;\n        this.startIndex = this.openTagStart;\n        if (this.attribs) {\n            (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs, isImplied);\n            this.attribs = null;\n        }\n        if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {\n            this.cbs.onclosetag(this.tagname, true);\n        }\n        this.tagname = \"\";\n    };\n    /** @internal */\n    Parser.prototype.onopentagend = function (endIndex) {\n        this.endIndex = endIndex;\n        this.endOpenTag(false);\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */\n    Parser.prototype.onclosetag = function (start, endIndex) {\n        var _a, _b, _c, _d, _e, _f;\n        this.endIndex = endIndex;\n        var name = this.getSlice(start, endIndex);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        if (foreignContextElements.has(name) ||\n            htmlIntegrationElements.has(name)) {\n            this.foreignContext.pop();\n        }\n        if (!this.isVoidElement(name)) {\n            var pos = this.stack.lastIndexOf(name);\n            if (pos !== -1) {\n                if (this.cbs.onclosetag) {\n                    var count = this.stack.length - pos;\n                    while (count--) {\n                        // We know the stack has sufficient elements.\n                        this.cbs.onclosetag(this.stack.pop(), count !== 0);\n                    }\n                }\n                else\n                    this.stack.length = pos;\n            }\n            else if (!this.options.xmlMode && name === \"p\") {\n                // Implicit open before close\n                this.emitOpenTag(\"p\");\n                this.closeCurrentTag(true);\n            }\n        }\n        else if (!this.options.xmlMode && name === \"br\") {\n            // We can't use `emitOpenTag` for implicit open, as `br` would be implicitly closed.\n            (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, \"br\");\n            (_d = (_c = this.cbs).onopentag) === null || _d === void 0 ? void 0 : _d.call(_c, \"br\", {}, true);\n            (_f = (_e = this.cbs).onclosetag) === null || _f === void 0 ? void 0 : _f.call(_e, \"br\", false);\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */\n    Parser.prototype.onselfclosingtag = function (endIndex) {\n        this.endIndex = endIndex;\n        if (this.options.xmlMode ||\n            this.options.recognizeSelfClosing ||\n            this.foreignContext[this.foreignContext.length - 1]) {\n            this.closeCurrentTag(false);\n            // Set `startIndex` for next node\n            this.startIndex = endIndex + 1;\n        }\n        else {\n            // Ignore the fact that the tag is self-closing.\n            this.onopentagend(endIndex);\n        }\n    };\n    Parser.prototype.closeCurrentTag = function (isOpenImplied) {\n        var _a, _b;\n        var name = this.tagname;\n        this.endOpenTag(isOpenImplied);\n        // Self-closing tags will be on the top of the stack\n        if (this.stack[this.stack.length - 1] === name) {\n            // If the opening tag isn't implied, the closing tag has to be implied.\n            (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name, !isOpenImplied);\n            this.stack.pop();\n        }\n    };\n    /** @internal */\n    Parser.prototype.onattribname = function (start, endIndex) {\n        this.startIndex = start;\n        var name = this.getSlice(start, endIndex);\n        this.attribname = this.lowerCaseAttributeNames\n            ? name.toLowerCase()\n            : name;\n    };\n    /** @internal */\n    Parser.prototype.onattribdata = function (start, endIndex) {\n        this.attribvalue += this.getSlice(start, endIndex);\n    };\n    /** @internal */\n    Parser.prototype.onattribentity = function (cp) {\n        this.attribvalue += (0, decode_js_1.fromCodePoint)(cp);\n    };\n    /** @internal */\n    Parser.prototype.onattribend = function (quote, endIndex) {\n        var _a, _b;\n        this.endIndex = endIndex;\n        (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote === Tokenizer_js_1.QuoteType.Double\n            ? '\"'\n            : quote === Tokenizer_js_1.QuoteType.Single\n                ? \"'\"\n                : quote === Tokenizer_js_1.QuoteType.NoValue\n                    ? undefined\n                    : null);\n        if (this.attribs &&\n            !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {\n            this.attribs[this.attribname] = this.attribvalue;\n        }\n        this.attribvalue = \"\";\n    };\n    Parser.prototype.getInstructionName = function (value) {\n        var idx = value.search(reNameEnd);\n        var name = idx < 0 ? value : value.substr(0, idx);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        return name;\n    };\n    /** @internal */\n    Parser.prototype.ondeclaration = function (start, endIndex) {\n        this.endIndex = endIndex;\n        var value = this.getSlice(start, endIndex);\n        if (this.cbs.onprocessinginstruction) {\n            var name = this.getInstructionName(value);\n            this.cbs.onprocessinginstruction(\"!\".concat(name), \"!\".concat(value));\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */\n    Parser.prototype.onprocessinginstruction = function (start, endIndex) {\n        this.endIndex = endIndex;\n        var value = this.getSlice(start, endIndex);\n        if (this.cbs.onprocessinginstruction) {\n            var name = this.getInstructionName(value);\n            this.cbs.onprocessinginstruction(\"?\".concat(name), \"?\".concat(value));\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */\n    Parser.prototype.oncomment = function (start, endIndex, offset) {\n        var _a, _b, _c, _d;\n        this.endIndex = endIndex;\n        (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, this.getSlice(start, endIndex - offset));\n        (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */\n    Parser.prototype.oncdata = function (start, endIndex, offset) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        this.endIndex = endIndex;\n        var value = this.getSlice(start, endIndex - offset);\n        if (this.options.xmlMode || this.options.recognizeCDATA) {\n            (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);\n            (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);\n            (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);\n        }\n        else {\n            (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, \"[CDATA[\".concat(value, \"]]\"));\n            (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */\n    Parser.prototype.onend = function () {\n        var _a, _b;\n        if (this.cbs.onclosetag) {\n            // Set the end index for all remaining tags\n            this.endIndex = this.startIndex;\n            for (var i = this.stack.length; i > 0; this.cbs.onclosetag(this.stack[--i], true))\n                ;\n        }\n        (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    /**\n     * Resets the parser to a blank state, ready to parse a new HTML document\n     */\n    Parser.prototype.reset = function () {\n        var _a, _b, _c, _d;\n        (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.tokenizer.reset();\n        this.tagname = \"\";\n        this.attribname = \"\";\n        this.attribs = null;\n        this.stack.length = 0;\n        this.startIndex = 0;\n        this.endIndex = 0;\n        (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n        this.buffers.length = 0;\n        this.bufferOffset = 0;\n        this.writeIndex = 0;\n        this.ended = false;\n    };\n    /**\n     * Resets the parser, then parses a complete document and\n     * pushes it to the handler.\n     *\n     * @param data Document to parse.\n     */\n    Parser.prototype.parseComplete = function (data) {\n        this.reset();\n        this.end(data);\n    };\n    Parser.prototype.getSlice = function (start, end) {\n        while (start - this.bufferOffset >= this.buffers[0].length) {\n            this.shiftBuffer();\n        }\n        var str = this.buffers[0].slice(start - this.bufferOffset, end - this.bufferOffset);\n        while (end - this.bufferOffset > this.buffers[0].length) {\n            this.shiftBuffer();\n            str += this.buffers[0].slice(0, end - this.bufferOffset);\n        }\n        return str;\n    };\n    Parser.prototype.shiftBuffer = function () {\n        this.bufferOffset += this.buffers[0].length;\n        this.writeIndex--;\n        this.buffers.shift();\n    };\n    /**\n     * Parses a chunk of data and calls the corresponding callbacks.\n     *\n     * @param chunk Chunk to parse.\n     */\n    Parser.prototype.write = function (chunk) {\n        var _a, _b;\n        if (this.ended) {\n            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(\".write() after done!\"));\n            return;\n        }\n        this.buffers.push(chunk);\n        if (this.tokenizer.running) {\n            this.tokenizer.write(chunk);\n            this.writeIndex++;\n        }\n    };\n    /**\n     * Parses the end of the buffer and clears the stack, calls onend.\n     *\n     * @param chunk Optional final chunk to parse.\n     */\n    Parser.prototype.end = function (chunk) {\n        var _a, _b;\n        if (this.ended) {\n            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, Error(\".end() after done!\"));\n            return;\n        }\n        if (chunk)\n            this.write(chunk);\n        this.ended = true;\n        this.tokenizer.end();\n    };\n    /**\n     * Pauses parsing. The parser won't emit events until `resume` is called.\n     */\n    Parser.prototype.pause = function () {\n        this.tokenizer.pause();\n    };\n    /**\n     * Resumes parsing after `pause` was called.\n     */\n    Parser.prototype.resume = function () {\n        this.tokenizer.resume();\n        while (this.tokenizer.running &&\n            this.writeIndex < this.buffers.length) {\n            this.tokenizer.write(this.buffers[this.writeIndex++]);\n        }\n        if (this.ended)\n            this.tokenizer.end();\n    };\n    /**\n     * Alias of `write`, for backwards compatibility.\n     *\n     * @param chunk Chunk to parse.\n     * @deprecated\n     */\n    Parser.prototype.parseChunk = function (chunk) {\n        this.write(chunk);\n    };\n    /**\n     * Alias of `end`, for backwards compatibility.\n     *\n     * @param chunk Optional final chunk to parse.\n     * @deprecated\n     */\n    Parser.prototype.done = function (chunk) {\n        this.end(chunk);\n    };\n    return Parser;\n}());\n\nmodule.exports = Parser;"],"names":["require$$0","require$$1","Parser"],"mappings":"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"}