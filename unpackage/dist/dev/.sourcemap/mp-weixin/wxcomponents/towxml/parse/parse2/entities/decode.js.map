{"version":3,"file":"decode.js","sources":["wxcomponents/towxml/parse/parse2/entities/decode.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTML = exports.determineBranch = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;\nvar decode_data_html_js_1 = __importDefault(require(\"./generated/decode-data-html.js\"));\nexports.htmlDecodeTree = decode_data_html_js_1.default;\nvar decode_data_xml_js_1 = __importDefault(require(\"./generated/decode-data-xml.js\"));\nexports.xmlDecodeTree = decode_data_xml_js_1.default;\nvar decode_codepoint_js_1 = __importDefault(require(\"./decode_codepoint.js\"));\nexports.decodeCodePoint = decode_codepoint_js_1.default;\nvar decode_codepoint_js_2 = require(\"./decode_codepoint.js\");\nObject.defineProperty(exports, \"replaceCodePoint\", { enumerable: true, get: function () { return decode_codepoint_js_2.replaceCodePoint; } });\nObject.defineProperty(exports, \"fromCodePoint\", { enumerable: true, get: function () { return decode_codepoint_js_2.fromCodePoint; } });\nvar CharCodes;\n(function (CharCodes) {\n    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n    /** Bit that needs to be set to convert an upper case ASCII character to lower case */\n    CharCodes[CharCodes[\"To_LOWER_BIT\"] = 32] = \"To_LOWER_BIT\";\n})(CharCodes || (CharCodes = {}));\nvar BinTrieFlags;\n(function (BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));\nfunction getDecoder(decodeTree) {\n    return function decodeHTMLBinary(str, strict) {\n        var ret = \"\";\n        var lastIdx = 0;\n        var strIdx = 0;\n        while ((strIdx = str.indexOf(\"&\", strIdx)) >= 0) {\n            ret += str.slice(lastIdx, strIdx);\n            lastIdx = strIdx;\n            // Skip the \"&\"\n            strIdx += 1;\n            // If we have a numeric entity, handle this separately.\n            if (str.charCodeAt(strIdx) === CharCodes.NUM) {\n                // Skip the leading \"&#\". For hex entities, also skip the leading \"x\".\n                var start = strIdx + 1;\n                var base = 10;\n                var cp = str.charCodeAt(start);\n                if ((cp | CharCodes.To_LOWER_BIT) === CharCodes.LOWER_X) {\n                    base = 16;\n                    strIdx += 1;\n                    start += 1;\n                }\n                do\n                    cp = str.charCodeAt(++strIdx);\n                while ((cp >= CharCodes.ZERO && cp <= CharCodes.NINE) ||\n                    (base === 16 &&\n                        (cp | CharCodes.To_LOWER_BIT) >= CharCodes.LOWER_A &&\n                        (cp | CharCodes.To_LOWER_BIT) <= CharCodes.LOWER_F));\n                if (start !== strIdx) {\n                    var entity = str.substring(start, strIdx);\n                    var parsed = parseInt(entity, base);\n                    if (str.charCodeAt(strIdx) === CharCodes.SEMI) {\n                        strIdx += 1;\n                    }\n                    else if (strict) {\n                        continue;\n                    }\n                    ret += (0, decode_codepoint_js_1.default)(parsed);\n                    lastIdx = strIdx;\n                }\n                continue;\n            }\n            var resultIdx = 0;\n            var excess = 1;\n            var treeIdx = 0;\n            var current = decodeTree[treeIdx];\n            for (; strIdx < str.length; strIdx++, excess++) {\n                treeIdx = determineBranch(decodeTree, current, treeIdx + 1, str.charCodeAt(strIdx));\n                if (treeIdx < 0)\n                    break;\n                current = decodeTree[treeIdx];\n                var masked = current & BinTrieFlags.VALUE_LENGTH;\n                // If the branch is a value, store it and continue\n                if (masked) {\n                    // If we have a legacy entity while parsing strictly, just skip the number of bytes\n                    if (!strict || str.charCodeAt(strIdx) === CharCodes.SEMI) {\n                        resultIdx = treeIdx;\n                        excess = 0;\n                    }\n                    // The mask is the number of bytes of the value, including the current byte.\n                    var valueLength = (masked >> 14) - 1;\n                    if (valueLength === 0)\n                        break;\n                    treeIdx += valueLength;\n                }\n            }\n            if (resultIdx !== 0) {\n                var valueLength = (decodeTree[resultIdx] & BinTrieFlags.VALUE_LENGTH) >> 14;\n                ret +=\n                    valueLength === 1\n                        ? String.fromCharCode(decodeTree[resultIdx] & ~BinTrieFlags.VALUE_LENGTH)\n                        : valueLength === 2\n                            ? String.fromCharCode(decodeTree[resultIdx + 1])\n                            : String.fromCharCode(decodeTree[resultIdx + 1], decodeTree[resultIdx + 2]);\n                lastIdx = strIdx - excess + 1;\n            }\n        }\n        return ret + str.slice(lastIdx);\n    };\n}\nfunction determineBranch(decodeTree, current, nodeIdx, char) {\n    var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n    var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n    // Case 1: Single branch encoded in jump offset\n    if (branchCount === 0) {\n        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n    }\n    // Case 2: Multiple branches encoded in jump table\n    if (jumpOffset) {\n        var value = char - jumpOffset;\n        return value < 0 || value >= branchCount\n            ? -1\n            : decodeTree[nodeIdx + value] - 1;\n    }\n    // Case 3: Multiple branches encoded in dictionary\n    // Binary search for the character.\n    var lo = nodeIdx;\n    var hi = lo + branchCount - 1;\n    while (lo <= hi) {\n        var mid = (lo + hi) >>> 1;\n        var midVal = decodeTree[mid];\n        if (midVal < char) {\n            lo = mid + 1;\n        }\n        else if (midVal > char) {\n            hi = mid - 1;\n        }\n        else {\n            return decodeTree[mid + branchCount];\n        }\n    }\n    return -1;\n}\nexports.determineBranch = determineBranch;\nvar htmlDecoder = getDecoder(decode_data_html_js_1.default);\nvar xmlDecoder = getDecoder(decode_data_xml_js_1.default);\n/**\n * Decodes an HTML string, allowing for entities not terminated by a semi-colon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeHTML(str) {\n    return htmlDecoder(str, false);\n}\nexports.decodeHTML = decodeHTML;\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semi-colon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeHTMLStrict(str) {\n    return htmlDecoder(str, true);\n}\nexports.decodeHTMLStrict = decodeHTMLStrict;\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semi-colon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeXML(str) {\n    return xmlDecoder(str, true);\n}\nexports.decodeXML = decodeXML;\n//# sourceMappingURL=decode.js.map"],"names":["this","exports","require$$0","require$$1","require$$2","CharCodes","BinTrieFlags"],"mappings":"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"}