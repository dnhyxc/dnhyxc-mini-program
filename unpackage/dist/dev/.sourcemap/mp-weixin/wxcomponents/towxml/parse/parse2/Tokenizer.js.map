{"version":3,"file":"Tokenizer.js","sources":["wxcomponents/towxml/parse/parse2/Tokenizer.js"],"sourcesContent":["var decode_js_1 = require(\"./entities/decode.js\");\nvar CharCodes;\n(function (CharCodes) {\n    CharCodes[CharCodes[\"Tab\"] = 9] = \"Tab\";\n    CharCodes[CharCodes[\"NewLine\"] = 10] = \"NewLine\";\n    CharCodes[CharCodes[\"FormFeed\"] = 12] = \"FormFeed\";\n    CharCodes[CharCodes[\"CarriageReturn\"] = 13] = \"CarriageReturn\";\n    CharCodes[CharCodes[\"Space\"] = 32] = \"Space\";\n    CharCodes[CharCodes[\"ExclamationMark\"] = 33] = \"ExclamationMark\";\n    CharCodes[CharCodes[\"Num\"] = 35] = \"Num\";\n    CharCodes[CharCodes[\"Amp\"] = 38] = \"Amp\";\n    CharCodes[CharCodes[\"SingleQuote\"] = 39] = \"SingleQuote\";\n    CharCodes[CharCodes[\"DoubleQuote\"] = 34] = \"DoubleQuote\";\n    CharCodes[CharCodes[\"Dash\"] = 45] = \"Dash\";\n    CharCodes[CharCodes[\"Slash\"] = 47] = \"Slash\";\n    CharCodes[CharCodes[\"Zero\"] = 48] = \"Zero\";\n    CharCodes[CharCodes[\"Nine\"] = 57] = \"Nine\";\n    CharCodes[CharCodes[\"Semi\"] = 59] = \"Semi\";\n    CharCodes[CharCodes[\"Lt\"] = 60] = \"Lt\";\n    CharCodes[CharCodes[\"Eq\"] = 61] = \"Eq\";\n    CharCodes[CharCodes[\"Gt\"] = 62] = \"Gt\";\n    CharCodes[CharCodes[\"Questionmark\"] = 63] = \"Questionmark\";\n    CharCodes[CharCodes[\"UpperA\"] = 65] = \"UpperA\";\n    CharCodes[CharCodes[\"LowerA\"] = 97] = \"LowerA\";\n    CharCodes[CharCodes[\"UpperF\"] = 70] = \"UpperF\";\n    CharCodes[CharCodes[\"LowerF\"] = 102] = \"LowerF\";\n    CharCodes[CharCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n    CharCodes[CharCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n    CharCodes[CharCodes[\"LowerX\"] = 120] = \"LowerX\";\n    CharCodes[CharCodes[\"OpeningSquareBracket\"] = 91] = \"OpeningSquareBracket\";\n})(CharCodes || (CharCodes = {}));\n/** All the states the tokenizer can be in. */\nvar State;\n(function (State) {\n    State[State[\"Text\"] = 1] = \"Text\";\n    State[State[\"BeforeTagName\"] = 2] = \"BeforeTagName\";\n    State[State[\"InTagName\"] = 3] = \"InTagName\";\n    State[State[\"InSelfClosingTag\"] = 4] = \"InSelfClosingTag\";\n    State[State[\"BeforeClosingTagName\"] = 5] = \"BeforeClosingTagName\";\n    State[State[\"InClosingTagName\"] = 6] = \"InClosingTagName\";\n    State[State[\"AfterClosingTagName\"] = 7] = \"AfterClosingTagName\";\n    // Attributes\n    State[State[\"BeforeAttributeName\"] = 8] = \"BeforeAttributeName\";\n    State[State[\"InAttributeName\"] = 9] = \"InAttributeName\";\n    State[State[\"AfterAttributeName\"] = 10] = \"AfterAttributeName\";\n    State[State[\"BeforeAttributeValue\"] = 11] = \"BeforeAttributeValue\";\n    State[State[\"InAttributeValueDq\"] = 12] = \"InAttributeValueDq\";\n    State[State[\"InAttributeValueSq\"] = 13] = \"InAttributeValueSq\";\n    State[State[\"InAttributeValueNq\"] = 14] = \"InAttributeValueNq\";\n    // Declarations\n    State[State[\"BeforeDeclaration\"] = 15] = \"BeforeDeclaration\";\n    State[State[\"InDeclaration\"] = 16] = \"InDeclaration\";\n    // Processing instructions\n    State[State[\"InProcessingInstruction\"] = 17] = \"InProcessingInstruction\";\n    // Comments & CDATA\n    State[State[\"BeforeComment\"] = 18] = \"BeforeComment\";\n    State[State[\"CDATASequence\"] = 19] = \"CDATASequence\";\n    State[State[\"InSpecialComment\"] = 20] = \"InSpecialComment\";\n    State[State[\"InCommentLike\"] = 21] = \"InCommentLike\";\n    // Special tags\n    State[State[\"BeforeSpecialS\"] = 22] = \"BeforeSpecialS\";\n    State[State[\"SpecialStartSequence\"] = 23] = \"SpecialStartSequence\";\n    State[State[\"InSpecialTag\"] = 24] = \"InSpecialTag\";\n    State[State[\"BeforeEntity\"] = 25] = \"BeforeEntity\";\n    State[State[\"BeforeNumericEntity\"] = 26] = \"BeforeNumericEntity\";\n    State[State[\"InNamedEntity\"] = 27] = \"InNamedEntity\";\n    State[State[\"InNumericEntity\"] = 28] = \"InNumericEntity\";\n    State[State[\"InHexEntity\"] = 29] = \"InHexEntity\";\n})(State || (State = {}));\nfunction isWhitespace(c) {\n    return (c === CharCodes.Space ||\n        c === CharCodes.NewLine ||\n        c === CharCodes.Tab ||\n        c === CharCodes.FormFeed ||\n        c === CharCodes.CarriageReturn);\n}\nfunction isEndOfTagSection(c) {\n    return c === CharCodes.Slash || c === CharCodes.Gt || isWhitespace(c);\n}\nfunction isNumber(c) {\n    return c >= CharCodes.Zero && c <= CharCodes.Nine;\n}\nfunction isASCIIAlpha(c) {\n    return ((c >= CharCodes.LowerA && c <= CharCodes.LowerZ) ||\n        (c >= CharCodes.UpperA && c <= CharCodes.UpperZ));\n}\nfunction isHexDigit(c) {\n    return ((c >= CharCodes.UpperA && c <= CharCodes.UpperF) ||\n        (c >= CharCodes.LowerA && c <= CharCodes.LowerF));\n}\nvar QuoteType;\n(function (QuoteType) {\n    QuoteType[QuoteType[\"NoValue\"] = 0] = \"NoValue\";\n    QuoteType[QuoteType[\"Unquoted\"] = 1] = \"Unquoted\";\n    QuoteType[QuoteType[\"Single\"] = 2] = \"Single\";\n    QuoteType[QuoteType[\"Double\"] = 3] = \"Double\";\n})(QuoteType = exports.QuoteType || (exports.QuoteType = {}));\n/**\n * Sequences used to match longer strings.\n *\n * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End\n * sequences with an increased offset.\n */\nvar Sequences = {\n    Cdata: new Uint8Array([0x43, 0x44, 0x41, 0x54, 0x41, 0x5b]),\n    CdataEnd: new Uint8Array([0x5d, 0x5d, 0x3e]),\n    CommentEnd: new Uint8Array([0x2d, 0x2d, 0x3e]),\n    ScriptEnd: new Uint8Array([0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74]),\n    StyleEnd: new Uint8Array([0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65]),\n    TitleEnd: new Uint8Array([0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65]), // `</title`\n};\nvar Tokenizer = /** @class */ (function () {\n    function Tokenizer(_a, cbs) {\n        var _b = _a.xmlMode, xmlMode = _b === void 0 ? false : _b, _c = _a.decodeEntities, decodeEntities = _c === void 0 ? true : _c;\n        this.cbs = cbs;\n        /** The current state the tokenizer is in. */\n        this.state = State.Text;\n        /** The read buffer. */\n        this.buffer = \"\";\n        /** The beginning of the section that is currently being read. */\n        this.sectionStart = 0;\n        /** The index within the buffer that we are currently looking at. */\n        this.index = 0;\n        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */\n        this.baseState = State.Text;\n        /** For special parsing behavior inside of script and style tags. */\n        this.isSpecial = false;\n        /** Indicates whether the tokenizer has been paused. */\n        this.running = true;\n        /** The offset of the current buffer. */\n        this.offset = 0;\n        this.sequenceIndex = 0;\n        this.trieIndex = 0;\n        this.trieCurrent = 0;\n        /** For named entities, the index of the value. For numeric entities, the code point. */\n        this.entityResult = 0;\n        this.entityExcess = 0;\n        this.xmlMode = xmlMode;\n        this.decodeEntities = decodeEntities;\n        this.entityTrie = xmlMode ? decode_js_1.xmlDecodeTree : decode_js_1.htmlDecodeTree;\n    }\n    Tokenizer.prototype.reset = function () {\n        this.state = State.Text;\n        this.buffer = \"\";\n        this.sectionStart = 0;\n        this.index = 0;\n        this.baseState = State.Text;\n        this.currentSequence = undefined;\n        this.running = true;\n        this.offset = 0;\n    };\n    Tokenizer.prototype.write = function (chunk) {\n        this.offset += this.buffer.length;\n        this.buffer = chunk;\n        this.parse();\n    };\n    Tokenizer.prototype.end = function () {\n        if (this.running)\n            this.finish();\n    };\n    Tokenizer.prototype.pause = function () {\n        this.running = false;\n    };\n    Tokenizer.prototype.resume = function () {\n        this.running = true;\n        if (this.index < this.buffer.length + this.offset) {\n            this.parse();\n        }\n    };\n    /**\n     * The current index within all of the written data.\n     */\n    Tokenizer.prototype.getIndex = function () {\n        return this.index;\n    };\n    /**\n     * The start of the current section.\n     */\n    Tokenizer.prototype.getSectionStart = function () {\n        return this.sectionStart;\n    };\n    Tokenizer.prototype.stateText = function (c) {\n        if (c === CharCodes.Lt ||\n            (!this.decodeEntities && this.fastForwardTo(CharCodes.Lt))) {\n            if (this.index > this.sectionStart) {\n                this.cbs.ontext(this.sectionStart, this.index);\n            }\n            this.state = State.BeforeTagName;\n            this.sectionStart = this.index;\n        }\n        else if (this.decodeEntities && c === CharCodes.Amp) {\n            this.state = State.BeforeEntity;\n        }\n    };\n    Tokenizer.prototype.stateSpecialStartSequence = function (c) {\n        var isEnd = this.sequenceIndex === this.currentSequence.length;\n        var isMatch = isEnd\n            ? // If we are at the end of the sequence, make sure the tag name has ended\n                isEndOfTagSection(c)\n            : // Otherwise, do a case-insensitive comparison\n                (c | 0x20) === this.currentSequence[this.sequenceIndex];\n        if (!isMatch) {\n            this.isSpecial = false;\n        }\n        else if (!isEnd) {\n            this.sequenceIndex++;\n            return;\n        }\n        this.sequenceIndex = 0;\n        this.state = State.InTagName;\n        this.stateInTagName(c);\n    };\n    /** Look for an end tag. For <title> tags, also decode entities. */\n    Tokenizer.prototype.stateInSpecialTag = function (c) {\n        if (this.sequenceIndex === this.currentSequence.length) {\n            if (c === CharCodes.Gt || isWhitespace(c)) {\n                var endOfText = this.index - this.currentSequence.length;\n                if (this.sectionStart < endOfText) {\n                    // Spoof the index so that reported locations match up.\n                    var actualIndex = this.index;\n                    this.index = endOfText;\n                    this.cbs.ontext(this.sectionStart, endOfText);\n                    this.index = actualIndex;\n                }\n                this.isSpecial = false;\n                this.sectionStart = endOfText + 2; // Skip over the `</`\n                this.stateInClosingTagName(c);\n                return; // We are done; skip the rest of the function.\n            }\n            this.sequenceIndex = 0;\n        }\n        if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) {\n            this.sequenceIndex += 1;\n        }\n        else if (this.sequenceIndex === 0) {\n            if (this.currentSequence === Sequences.TitleEnd) {\n                // We have to parse entities in <title> tags.\n                if (this.decodeEntities && c === CharCodes.Amp) {\n                    this.state = State.BeforeEntity;\n                }\n            }\n            else if (this.fastForwardTo(CharCodes.Lt)) {\n                // Outside of <title> tags, we can fast-forward.\n                this.sequenceIndex = 1;\n            }\n        }\n        else {\n            // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.\n            this.sequenceIndex = Number(c === CharCodes.Lt);\n        }\n    };\n    Tokenizer.prototype.stateCDATASequence = function (c) {\n        if (c === Sequences.Cdata[this.sequenceIndex]) {\n            if (++this.sequenceIndex === Sequences.Cdata.length) {\n                this.state = State.InCommentLike;\n                this.currentSequence = Sequences.CdataEnd;\n                this.sequenceIndex = 0;\n                this.sectionStart = this.index + 1;\n            }\n        }\n        else {\n            this.sequenceIndex = 0;\n            this.state = State.InDeclaration;\n            this.stateInDeclaration(c); // Reconsume the character\n        }\n    };\n    /**\n     * When we wait for one specific character, we can speed things up\n     * by skipping through the buffer until we find it.\n     *\n     * @returns Whether the character was found.\n     */\n    Tokenizer.prototype.fastForwardTo = function (c) {\n        while (++this.index < this.buffer.length + this.offset) {\n            if (this.buffer.charCodeAt(this.index - this.offset) === c) {\n                return true;\n            }\n        }\n        /*\n         * We increment the index at the end of the `parse` loop,\n         * so set it to `buffer.length - 1` here.\n         *\n         * TODO: Refactor `parse` to increment index before calling states.\n         */\n        this.index = this.buffer.length + this.offset - 1;\n        return false;\n    };\n    /**\n     * Comments and CDATA end with `-->` and `]]>`.\n     *\n     * Their common qualities are:\n     * - Their end sequences have a distinct character they start with.\n     * - That character is then repeated, so we have to check multiple repeats.\n     * - All characters but the start character of the sequence can be skipped.\n     */\n    Tokenizer.prototype.stateInCommentLike = function (c) {\n        if (c === this.currentSequence[this.sequenceIndex]) {\n            if (++this.sequenceIndex === this.currentSequence.length) {\n                if (this.currentSequence === Sequences.CdataEnd) {\n                    this.cbs.oncdata(this.sectionStart, this.index, 2);\n                }\n                else {\n                    this.cbs.oncomment(this.sectionStart, this.index, 2);\n                }\n                this.sequenceIndex = 0;\n                this.sectionStart = this.index + 1;\n                this.state = State.Text;\n            }\n        }\n        else if (this.sequenceIndex === 0) {\n            // Fast-forward to the first character of the sequence\n            if (this.fastForwardTo(this.currentSequence[0])) {\n                this.sequenceIndex = 1;\n            }\n        }\n        else if (c !== this.currentSequence[this.sequenceIndex - 1]) {\n            // Allow long sequences, eg. --->, ]]]>\n            this.sequenceIndex = 0;\n        }\n    };\n    /**\n     * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n     *\n     * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n     * We allow anything that wouldn't end the tag.\n     */\n    Tokenizer.prototype.isTagStartChar = function (c) {\n        return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);\n    };\n    Tokenizer.prototype.startSpecial = function (sequence, offset) {\n        this.isSpecial = true;\n        this.currentSequence = sequence;\n        this.sequenceIndex = offset;\n        this.state = State.SpecialStartSequence;\n    };\n    Tokenizer.prototype.stateBeforeTagName = function (c) {\n        if (c === CharCodes.ExclamationMark) {\n            this.state = State.BeforeDeclaration;\n            this.sectionStart = this.index + 1;\n        }\n        else if (c === CharCodes.Questionmark) {\n            this.state = State.InProcessingInstruction;\n            this.sectionStart = this.index + 1;\n        }\n        else if (this.isTagStartChar(c)) {\n            var lower = c | 0x20;\n            this.sectionStart = this.index;\n            if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {\n                this.startSpecial(Sequences.TitleEnd, 3);\n            }\n            else {\n                this.state =\n                    !this.xmlMode && lower === Sequences.ScriptEnd[2]\n                        ? State.BeforeSpecialS\n                        : State.InTagName;\n            }\n        }\n        else if (c === CharCodes.Slash) {\n            this.state = State.BeforeClosingTagName;\n        }\n        else {\n            this.state = State.Text;\n            this.stateText(c);\n        }\n    };\n    Tokenizer.prototype.stateInTagName = function (c) {\n        if (isEndOfTagSection(c)) {\n            this.cbs.onopentagname(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateBeforeClosingTagName = function (c) {\n        if (isWhitespace(c)) {\n            // Ignore\n        }\n        else if (c === CharCodes.Gt) {\n            this.state = State.Text;\n        }\n        else {\n            this.state = this.isTagStartChar(c)\n                ? State.InClosingTagName\n                : State.InSpecialComment;\n            this.sectionStart = this.index;\n        }\n    };\n    Tokenizer.prototype.stateInClosingTagName = function (c) {\n        if (c === CharCodes.Gt || isWhitespace(c)) {\n            this.cbs.onclosetag(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.state = State.AfterClosingTagName;\n            this.stateAfterClosingTagName(c);\n        }\n    };\n    Tokenizer.prototype.stateAfterClosingTagName = function (c) {\n        // Skip everything until \">\"\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeName = function (c) {\n        if (c === CharCodes.Gt) {\n            this.cbs.onopentagend(this.index);\n            if (this.isSpecial) {\n                this.state = State.InSpecialTag;\n                this.sequenceIndex = 0;\n            }\n            else {\n                this.state = State.Text;\n            }\n            this.baseState = this.state;\n            this.sectionStart = this.index + 1;\n        }\n        else if (c === CharCodes.Slash) {\n            this.state = State.InSelfClosingTag;\n        }\n        else if (!isWhitespace(c)) {\n            this.state = State.InAttributeName;\n            this.sectionStart = this.index;\n        }\n    };\n    Tokenizer.prototype.stateInSelfClosingTag = function (c) {\n        if (c === CharCodes.Gt) {\n            this.cbs.onselfclosingtag(this.index);\n            this.state = State.Text;\n            this.baseState = State.Text;\n            this.sectionStart = this.index + 1;\n            this.isSpecial = false; // Reset special state, in case of self-closing special tags\n        }\n        else if (!isWhitespace(c)) {\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateInAttributeName = function (c) {\n        if (c === CharCodes.Eq || isEndOfTagSection(c)) {\n            this.cbs.onattribname(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.state = State.AfterAttributeName;\n            this.stateAfterAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateAfterAttributeName = function (c) {\n        if (c === CharCodes.Eq) {\n            this.state = State.BeforeAttributeValue;\n        }\n        else if (c === CharCodes.Slash || c === CharCodes.Gt) {\n            this.cbs.onattribend(QuoteType.NoValue, this.index);\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        }\n        else if (!isWhitespace(c)) {\n            this.cbs.onattribend(QuoteType.NoValue, this.index);\n            this.state = State.InAttributeName;\n            this.sectionStart = this.index;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeValue = function (c) {\n        if (c === CharCodes.DoubleQuote) {\n            this.state = State.InAttributeValueDq;\n            this.sectionStart = this.index + 1;\n        }\n        else if (c === CharCodes.SingleQuote) {\n            this.state = State.InAttributeValueSq;\n            this.sectionStart = this.index + 1;\n        }\n        else if (!isWhitespace(c)) {\n            this.sectionStart = this.index;\n            this.state = State.InAttributeValueNq;\n            this.stateInAttributeValueNoQuotes(c); // Reconsume token\n        }\n    };\n    Tokenizer.prototype.handleInAttributeValue = function (c, quote) {\n        if (c === quote ||\n            (!this.decodeEntities && this.fastForwardTo(quote))) {\n            this.cbs.onattribdata(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.cbs.onattribend(quote === CharCodes.DoubleQuote\n                ? QuoteType.Double\n                : QuoteType.Single, this.index);\n            this.state = State.BeforeAttributeName;\n        }\n        else if (this.decodeEntities && c === CharCodes.Amp) {\n            this.baseState = this.state;\n            this.state = State.BeforeEntity;\n        }\n    };\n    Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function (c) {\n        this.handleInAttributeValue(c, CharCodes.DoubleQuote);\n    };\n    Tokenizer.prototype.stateInAttributeValueSingleQuotes = function (c) {\n        this.handleInAttributeValue(c, CharCodes.SingleQuote);\n    };\n    Tokenizer.prototype.stateInAttributeValueNoQuotes = function (c) {\n        if (isWhitespace(c) || c === CharCodes.Gt) {\n            this.cbs.onattribdata(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.cbs.onattribend(QuoteType.Unquoted, this.index);\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        }\n        else if (this.decodeEntities && c === CharCodes.Amp) {\n            this.baseState = this.state;\n            this.state = State.BeforeEntity;\n        }\n    };\n    Tokenizer.prototype.stateBeforeDeclaration = function (c) {\n        if (c === CharCodes.OpeningSquareBracket) {\n            this.state = State.CDATASequence;\n            this.sequenceIndex = 0;\n        }\n        else {\n            this.state =\n                c === CharCodes.Dash\n                    ? State.BeforeComment\n                    : State.InDeclaration;\n        }\n    };\n    Tokenizer.prototype.stateInDeclaration = function (c) {\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.cbs.ondeclaration(this.sectionStart, this.index);\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    };\n    Tokenizer.prototype.stateInProcessingInstruction = function (c) {\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.cbs.onprocessinginstruction(this.sectionStart, this.index);\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeComment = function (c) {\n        if (c === CharCodes.Dash) {\n            this.state = State.InCommentLike;\n            this.currentSequence = Sequences.CommentEnd;\n            // Allow short comments (eg. <!-->)\n            this.sequenceIndex = 2;\n            this.sectionStart = this.index + 1;\n        }\n        else {\n            this.state = State.InDeclaration;\n        }\n    };\n    Tokenizer.prototype.stateInSpecialComment = function (c) {\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.cbs.oncomment(this.sectionStart, this.index, 0);\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeSpecialS = function (c) {\n        var lower = c | 0x20;\n        if (lower === Sequences.ScriptEnd[3]) {\n            this.startSpecial(Sequences.ScriptEnd, 4);\n        }\n        else if (lower === Sequences.StyleEnd[3]) {\n            this.startSpecial(Sequences.StyleEnd, 4);\n        }\n        else {\n            this.state = State.InTagName;\n            this.stateInTagName(c); // Consume the token again\n        }\n    };\n    Tokenizer.prototype.stateBeforeEntity = function (c) {\n        // Start excess with 1 to include the '&'\n        this.entityExcess = 1;\n        this.entityResult = 0;\n        if (c === CharCodes.Num) {\n            this.state = State.BeforeNumericEntity;\n        }\n        else if (c === CharCodes.Amp) {\n            // We have two `&` characters in a row. Stay in the current state.\n        }\n        else {\n            this.trieIndex = 0;\n            this.trieCurrent = this.entityTrie[0];\n            this.state = State.InNamedEntity;\n            this.stateInNamedEntity(c);\n        }\n    };\n    Tokenizer.prototype.stateInNamedEntity = function (c) {\n        this.entityExcess += 1;\n        this.trieIndex = (0, decode_js_1.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);\n        if (this.trieIndex < 0) {\n            this.emitNamedEntity();\n            this.index--;\n            return;\n        }\n        this.trieCurrent = this.entityTrie[this.trieIndex];\n        var masked = this.trieCurrent & decode_js_1.BinTrieFlags.VALUE_LENGTH;\n        // If the branch is a value, store it and continue\n        if (masked) {\n            // The mask is the number of bytes of the value, including the current byte.\n            var valueLength = (masked >> 14) - 1;\n            // If we have a legacy entity while parsing strictly, just skip the number of bytes\n            if (!this.allowLegacyEntity() && c !== CharCodes.Semi) {\n                this.trieIndex += valueLength;\n            }\n            else {\n                // Add 1 as we have already incremented the excess\n                var entityStart = this.index - this.entityExcess + 1;\n                if (entityStart > this.sectionStart) {\n                    this.emitPartial(this.sectionStart, entityStart);\n                }\n                // If this is a surrogate pair, consume the next two bytes\n                this.entityResult = this.trieIndex;\n                this.trieIndex += valueLength;\n                this.entityExcess = 0;\n                this.sectionStart = this.index + 1;\n                if (valueLength === 0) {\n                    this.emitNamedEntity();\n                }\n            }\n        }\n    };\n    Tokenizer.prototype.emitNamedEntity = function () {\n        this.state = this.baseState;\n        if (this.entityResult === 0) {\n            return;\n        }\n        var valueLength = (this.entityTrie[this.entityResult] & decode_js_1.BinTrieFlags.VALUE_LENGTH) >>\n            14;\n        switch (valueLength) {\n            case 1:\n                this.emitCodePoint(this.entityTrie[this.entityResult] &\n                    ~decode_js_1.BinTrieFlags.VALUE_LENGTH);\n                break;\n            case 2:\n                this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n                break;\n            case 3: {\n                this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n                this.emitCodePoint(this.entityTrie[this.entityResult + 2]);\n            }\n        }\n    };\n    Tokenizer.prototype.stateBeforeNumericEntity = function (c) {\n        if ((c | 0x20) === CharCodes.LowerX) {\n            this.entityExcess++;\n            this.state = State.InHexEntity;\n        }\n        else {\n            this.state = State.InNumericEntity;\n            this.stateInNumericEntity(c);\n        }\n    };\n    Tokenizer.prototype.emitNumericEntity = function (strict) {\n        var entityStart = this.index - this.entityExcess - 1;\n        var numberStart = entityStart + 2 + Number(this.state === State.InHexEntity);\n        if (numberStart !== this.index) {\n            // Emit leading data if any\n            if (entityStart > this.sectionStart) {\n                this.emitPartial(this.sectionStart, entityStart);\n            }\n            this.sectionStart = this.index + Number(strict);\n            this.emitCodePoint((0, decode_js_1.replaceCodePoint)(this.entityResult));\n        }\n        this.state = this.baseState;\n    };\n    Tokenizer.prototype.stateInNumericEntity = function (c) {\n        if (c === CharCodes.Semi) {\n            this.emitNumericEntity(true);\n        }\n        else if (isNumber(c)) {\n            this.entityResult = this.entityResult * 10 + (c - CharCodes.Zero);\n            this.entityExcess++;\n        }\n        else {\n            if (this.allowLegacyEntity()) {\n                this.emitNumericEntity(false);\n            }\n            else {\n                this.state = this.baseState;\n            }\n            this.index--;\n        }\n    };\n    Tokenizer.prototype.stateInHexEntity = function (c) {\n        if (c === CharCodes.Semi) {\n            this.emitNumericEntity(true);\n        }\n        else if (isNumber(c)) {\n            this.entityResult = this.entityResult * 16 + (c - CharCodes.Zero);\n            this.entityExcess++;\n        }\n        else if (isHexDigit(c)) {\n            this.entityResult =\n                this.entityResult * 16 + ((c | 0x20) - CharCodes.LowerA + 10);\n            this.entityExcess++;\n        }\n        else {\n            if (this.allowLegacyEntity()) {\n                this.emitNumericEntity(false);\n            }\n            else {\n                this.state = this.baseState;\n            }\n            this.index--;\n        }\n    };\n    Tokenizer.prototype.allowLegacyEntity = function () {\n        return (!this.xmlMode &&\n            (this.baseState === State.Text ||\n                this.baseState === State.InSpecialTag));\n    };\n    /**\n     * Remove data that has already been consumed from the buffer.\n     */\n    Tokenizer.prototype.cleanup = function () {\n        // If we are inside of text or attributes, emit what we already have.\n        if (this.running && this.sectionStart !== this.index) {\n            if (this.state === State.Text ||\n                (this.state === State.InSpecialTag && this.sequenceIndex === 0)) {\n                this.cbs.ontext(this.sectionStart, this.index);\n                this.sectionStart = this.index;\n            }\n            else if (this.state === State.InAttributeValueDq ||\n                this.state === State.InAttributeValueSq ||\n                this.state === State.InAttributeValueNq) {\n                this.cbs.onattribdata(this.sectionStart, this.index);\n                this.sectionStart = this.index;\n            }\n        }\n    };\n    Tokenizer.prototype.shouldContinue = function () {\n        return this.index < this.buffer.length + this.offset && this.running;\n    };\n    /**\n     * Iterates through the buffer, calling the function corresponding to the current state.\n     *\n     * States that are more likely to be hit are higher up, as a performance improvement.\n     */\n    Tokenizer.prototype.parse = function () {\n        while (this.shouldContinue()) {\n            var c = this.buffer.charCodeAt(this.index - this.offset);\n            if (this.state === State.Text) {\n                this.stateText(c);\n            }\n            else if (this.state === State.SpecialStartSequence) {\n                this.stateSpecialStartSequence(c);\n            }\n            else if (this.state === State.InSpecialTag) {\n                this.stateInSpecialTag(c);\n            }\n            else if (this.state === State.CDATASequence) {\n                this.stateCDATASequence(c);\n            }\n            else if (this.state === State.InAttributeValueDq) {\n                this.stateInAttributeValueDoubleQuotes(c);\n            }\n            else if (this.state === State.InAttributeName) {\n                this.stateInAttributeName(c);\n            }\n            else if (this.state === State.InCommentLike) {\n                this.stateInCommentLike(c);\n            }\n            else if (this.state === State.InSpecialComment) {\n                this.stateInSpecialComment(c);\n            }\n            else if (this.state === State.BeforeAttributeName) {\n                this.stateBeforeAttributeName(c);\n            }\n            else if (this.state === State.InTagName) {\n                this.stateInTagName(c);\n            }\n            else if (this.state === State.InClosingTagName) {\n                this.stateInClosingTagName(c);\n            }\n            else if (this.state === State.BeforeTagName) {\n                this.stateBeforeTagName(c);\n            }\n            else if (this.state === State.AfterAttributeName) {\n                this.stateAfterAttributeName(c);\n            }\n            else if (this.state === State.InAttributeValueSq) {\n                this.stateInAttributeValueSingleQuotes(c);\n            }\n            else if (this.state === State.BeforeAttributeValue) {\n                this.stateBeforeAttributeValue(c);\n            }\n            else if (this.state === State.BeforeClosingTagName) {\n                this.stateBeforeClosingTagName(c);\n            }\n            else if (this.state === State.AfterClosingTagName) {\n                this.stateAfterClosingTagName(c);\n            }\n            else if (this.state === State.BeforeSpecialS) {\n                this.stateBeforeSpecialS(c);\n            }\n            else if (this.state === State.InAttributeValueNq) {\n                this.stateInAttributeValueNoQuotes(c);\n            }\n            else if (this.state === State.InSelfClosingTag) {\n                this.stateInSelfClosingTag(c);\n            }\n            else if (this.state === State.InDeclaration) {\n                this.stateInDeclaration(c);\n            }\n            else if (this.state === State.BeforeDeclaration) {\n                this.stateBeforeDeclaration(c);\n            }\n            else if (this.state === State.BeforeComment) {\n                this.stateBeforeComment(c);\n            }\n            else if (this.state === State.InProcessingInstruction) {\n                this.stateInProcessingInstruction(c);\n            }\n            else if (this.state === State.InNamedEntity) {\n                this.stateInNamedEntity(c);\n            }\n            else if (this.state === State.BeforeEntity) {\n                this.stateBeforeEntity(c);\n            }\n            else if (this.state === State.InHexEntity) {\n                this.stateInHexEntity(c);\n            }\n            else if (this.state === State.InNumericEntity) {\n                this.stateInNumericEntity(c);\n            }\n            else {\n                // `this._state === State.BeforeNumericEntity`\n                this.stateBeforeNumericEntity(c);\n            }\n            this.index++;\n        }\n        this.cleanup();\n    };\n    Tokenizer.prototype.finish = function () {\n        if (this.state === State.InNamedEntity) {\n            this.emitNamedEntity();\n        }\n        // If there is remaining data, emit it in a reasonable way\n        if (this.sectionStart < this.index) {\n            this.handleTrailingData();\n        }\n        this.cbs.onend();\n    };\n    /** Handle any trailing data. */\n    Tokenizer.prototype.handleTrailingData = function () {\n        var endIndex = this.buffer.length + this.offset;\n        if (this.state === State.InCommentLike) {\n            if (this.currentSequence === Sequences.CdataEnd) {\n                this.cbs.oncdata(this.sectionStart, endIndex, 0);\n            }\n            else {\n                this.cbs.oncomment(this.sectionStart, endIndex, 0);\n            }\n        }\n        else if (this.state === State.InNumericEntity &&\n            this.allowLegacyEntity()) {\n            this.emitNumericEntity(false);\n            // All trailing data will have been consumed\n        }\n        else if (this.state === State.InHexEntity &&\n            this.allowLegacyEntity()) {\n            this.emitNumericEntity(false);\n            // All trailing data will have been consumed\n        }\n        else if (this.state === State.InTagName ||\n            this.state === State.BeforeAttributeName ||\n            this.state === State.BeforeAttributeValue ||\n            this.state === State.AfterAttributeName ||\n            this.state === State.InAttributeName ||\n            this.state === State.InAttributeValueSq ||\n            this.state === State.InAttributeValueDq ||\n            this.state === State.InAttributeValueNq ||\n            this.state === State.InClosingTagName) {\n            /*\n             * If we are currently in an opening or closing tag, us not calling the\n             * respective callback signals that the tag should be ignored.\n             */\n        }\n        else {\n            this.cbs.ontext(this.sectionStart, endIndex);\n        }\n    };\n    Tokenizer.prototype.emitPartial = function (start, endIndex) {\n        if (this.baseState !== State.Text &&\n            this.baseState !== State.InSpecialTag) {\n            this.cbs.onattribdata(start, endIndex);\n        }\n        else {\n            this.cbs.ontext(start, endIndex);\n        }\n    };\n    Tokenizer.prototype.emitCodePoint = function (cp) {\n        if (this.baseState !== State.Text &&\n            this.baseState !== State.InSpecialTag) {\n            this.cbs.onattribentity(cp);\n        }\n        else {\n            this.cbs.ontextentity(cp);\n        }\n    };\n    return Tokenizer;\n}());\nmodule.exports = {\n  default:Tokenizer,\n  QuoteType\n}"],"names":["require$$0","CharCodes","State","QuoteType","exports","Tokenizer","module"],"mappings":";;;;;;;;;AAAA,QAAI,cAAcA,iDAAAA;AAClB,QAAI;AACJ,KAAC,SAAUC,YAAW;AAClB,MAAAA,WAAUA,WAAU,KAAK,IAAI,CAAC,IAAI;AAClC,MAAAA,WAAUA,WAAU,SAAS,IAAI,EAAE,IAAI;AACvC,MAAAA,WAAUA,WAAU,UAAU,IAAI,EAAE,IAAI;AACxC,MAAAA,WAAUA,WAAU,gBAAgB,IAAI,EAAE,IAAI;AAC9C,MAAAA,WAAUA,WAAU,OAAO,IAAI,EAAE,IAAI;AACrC,MAAAA,WAAUA,WAAU,iBAAiB,IAAI,EAAE,IAAI;AAC/C,MAAAA,WAAUA,WAAU,KAAK,IAAI,EAAE,IAAI;AACnC,MAAAA,WAAUA,WAAU,KAAK,IAAI,EAAE,IAAI;AACnC,MAAAA,WAAUA,WAAU,aAAa,IAAI,EAAE,IAAI;AAC3C,MAAAA,WAAUA,WAAU,aAAa,IAAI,EAAE,IAAI;AAC3C,MAAAA,WAAUA,WAAU,MAAM,IAAI,EAAE,IAAI;AACpC,MAAAA,WAAUA,WAAU,OAAO,IAAI,EAAE,IAAI;AACrC,MAAAA,WAAUA,WAAU,MAAM,IAAI,EAAE,IAAI;AACpC,MAAAA,WAAUA,WAAU,MAAM,IAAI,EAAE,IAAI;AACpC,MAAAA,WAAUA,WAAU,MAAM,IAAI,EAAE,IAAI;AACpC,MAAAA,WAAUA,WAAU,IAAI,IAAI,EAAE,IAAI;AAClC,MAAAA,WAAUA,WAAU,IAAI,IAAI,EAAE,IAAI;AAClC,MAAAA,WAAUA,WAAU,IAAI,IAAI,EAAE,IAAI;AAClC,MAAAA,WAAUA,WAAU,cAAc,IAAI,EAAE,IAAI;AAC5C,MAAAA,WAAUA,WAAU,QAAQ,IAAI,EAAE,IAAI;AACtC,MAAAA,WAAUA,WAAU,QAAQ,IAAI,EAAE,IAAI;AACtC,MAAAA,WAAUA,WAAU,QAAQ,IAAI,EAAE,IAAI;AACtC,MAAAA,WAAUA,WAAU,QAAQ,IAAI,GAAG,IAAI;AACvC,MAAAA,WAAUA,WAAU,QAAQ,IAAI,EAAE,IAAI;AACtC,MAAAA,WAAUA,WAAU,QAAQ,IAAI,GAAG,IAAI;AACvC,MAAAA,WAAUA,WAAU,QAAQ,IAAI,GAAG,IAAI;AACvC,MAAAA,WAAUA,WAAU,sBAAsB,IAAI,EAAE,IAAI;AAAA,IACvD,GAAE,cAAc,YAAY,CAAE,EAAC;AAEhC,QAAI;AACJ,KAAC,SAAUC,QAAO;AACd,MAAAA,OAAMA,OAAM,MAAM,IAAI,CAAC,IAAI;AAC3B,MAAAA,OAAMA,OAAM,eAAe,IAAI,CAAC,IAAI;AACpC,MAAAA,OAAMA,OAAM,WAAW,IAAI,CAAC,IAAI;AAChC,MAAAA,OAAMA,OAAM,kBAAkB,IAAI,CAAC,IAAI;AACvC,MAAAA,OAAMA,OAAM,sBAAsB,IAAI,CAAC,IAAI;AAC3C,MAAAA,OAAMA,OAAM,kBAAkB,IAAI,CAAC,IAAI;AACvC,MAAAA,OAAMA,OAAM,qBAAqB,IAAI,CAAC,IAAI;AAE1C,MAAAA,OAAMA,OAAM,qBAAqB,IAAI,CAAC,IAAI;AAC1C,MAAAA,OAAMA,OAAM,iBAAiB,IAAI,CAAC,IAAI;AACtC,MAAAA,OAAMA,OAAM,oBAAoB,IAAI,EAAE,IAAI;AAC1C,MAAAA,OAAMA,OAAM,sBAAsB,IAAI,EAAE,IAAI;AAC5C,MAAAA,OAAMA,OAAM,oBAAoB,IAAI,EAAE,IAAI;AAC1C,MAAAA,OAAMA,OAAM,oBAAoB,IAAI,EAAE,IAAI;AAC1C,MAAAA,OAAMA,OAAM,oBAAoB,IAAI,EAAE,IAAI;AAE1C,MAAAA,OAAMA,OAAM,mBAAmB,IAAI,EAAE,IAAI;AACzC,MAAAA,OAAMA,OAAM,eAAe,IAAI,EAAE,IAAI;AAErC,MAAAA,OAAMA,OAAM,yBAAyB,IAAI,EAAE,IAAI;AAE/C,MAAAA,OAAMA,OAAM,eAAe,IAAI,EAAE,IAAI;AACrC,MAAAA,OAAMA,OAAM,eAAe,IAAI,EAAE,IAAI;AACrC,MAAAA,OAAMA,OAAM,kBAAkB,IAAI,EAAE,IAAI;AACxC,MAAAA,OAAMA,OAAM,eAAe,IAAI,EAAE,IAAI;AAErC,MAAAA,OAAMA,OAAM,gBAAgB,IAAI,EAAE,IAAI;AACtC,MAAAA,OAAMA,OAAM,sBAAsB,IAAI,EAAE,IAAI;AAC5C,MAAAA,OAAMA,OAAM,cAAc,IAAI,EAAE,IAAI;AACpC,MAAAA,OAAMA,OAAM,cAAc,IAAI,EAAE,IAAI;AACpC,MAAAA,OAAMA,OAAM,qBAAqB,IAAI,EAAE,IAAI;AAC3C,MAAAA,OAAMA,OAAM,eAAe,IAAI,EAAE,IAAI;AACrC,MAAAA,OAAMA,OAAM,iBAAiB,IAAI,EAAE,IAAI;AACvC,MAAAA,OAAMA,OAAM,aAAa,IAAI,EAAE,IAAI;AAAA,IACtC,GAAE,UAAU,QAAQ,CAAE,EAAC;AACxB,aAAS,aAAa,GAAG;AACrB,aAAQ,MAAM,UAAU,SACpB,MAAM,UAAU,WAChB,MAAM,UAAU,OAChB,MAAM,UAAU,YAChB,MAAM,UAAU;AAAA,IACxB;AACA,aAAS,kBAAkB,GAAG;AAC1B,aAAO,MAAM,UAAU,SAAS,MAAM,UAAU,MAAM,aAAa,CAAC;AAAA,IACxE;AACA,aAAS,SAAS,GAAG;AACjB,aAAO,KAAK,UAAU,QAAQ,KAAK,UAAU;AAAA,IACjD;AACA,aAAS,aAAa,GAAG;AACrB,aAAS,KAAK,UAAU,UAAU,KAAK,UAAU,UAC5C,KAAK,UAAU,UAAU,KAAK,UAAU;AAAA,IACjD;AACA,aAAS,WAAW,GAAG;AACnB,aAAS,KAAK,UAAU,UAAU,KAAK,UAAU,UAC5C,KAAK,UAAU,UAAU,KAAK,UAAU;AAAA,IACjD;AACA,QAAI;AACJ,KAAC,SAAUC,YAAW;AAClB,MAAAA,WAAUA,WAAU,SAAS,IAAI,CAAC,IAAI;AACtC,MAAAA,WAAUA,WAAU,UAAU,IAAI,CAAC,IAAI;AACvC,MAAAA,WAAUA,WAAU,QAAQ,IAAI,CAAC,IAAI;AACrC,MAAAA,WAAUA,WAAU,QAAQ,IAAI,CAAC,IAAI;AAAA,OACtC,YAAYC,SAAQ,cAAcA,SAAA,YAAoB,CAAE,EAAC;AAO5D,QAAI,YAAY;AAAA,MACZ,OAAO,IAAI,WAAW,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,EAAI,CAAC;AAAA,MAC1D,UAAU,IAAI,WAAW,CAAC,IAAM,IAAM,EAAI,CAAC;AAAA,MAC3C,YAAY,IAAI,WAAW,CAAC,IAAM,IAAM,EAAI,CAAC;AAAA,MAC7C,WAAW,IAAI,WAAW,CAAC,IAAM,IAAM,KAAM,IAAM,KAAM,KAAM,KAAM,GAAI,CAAC;AAAA,MAC1E,UAAU,IAAI,WAAW,CAAC,IAAM,IAAM,KAAM,KAAM,KAAM,KAAM,GAAI,CAAC;AAAA,MACnE,UAAU,IAAI,WAAW,CAAC,IAAM,IAAM,KAAM,KAAM,KAAM,KAAM,GAAI,CAAC;AAAA;AAAA;AAEvE,QAAI;AAAA;AAAA,MAA2B,WAAY;AACvC,iBAASC,WAAU,IAAI,KAAK;AACxB,cAAI,KAAK,GAAG,SAAS,UAAU,OAAO,SAAS,QAAQ,IAAI,KAAK,GAAG,gBAAgB,iBAAiB,OAAO,SAAS,OAAO;AAC3H,eAAK,MAAM;AAEX,eAAK,QAAQ,MAAM;AAEnB,eAAK,SAAS;AAEd,eAAK,eAAe;AAEpB,eAAK,QAAQ;AAEb,eAAK,YAAY,MAAM;AAEvB,eAAK,YAAY;AAEjB,eAAK,UAAU;AAEf,eAAK,SAAS;AACd,eAAK,gBAAgB;AACrB,eAAK,YAAY;AACjB,eAAK,cAAc;AAEnB,eAAK,eAAe;AACpB,eAAK,eAAe;AACpB,eAAK,UAAU;AACf,eAAK,iBAAiB;AACtB,eAAK,aAAa,UAAU,YAAY,gBAAgB,YAAY;AAAA,QAC5E;AACI,QAAAA,WAAU,UAAU,QAAQ,WAAY;AACpC,eAAK,QAAQ,MAAM;AACnB,eAAK,SAAS;AACd,eAAK,eAAe;AACpB,eAAK,QAAQ;AACb,eAAK,YAAY,MAAM;AACvB,eAAK,kBAAkB;AACvB,eAAK,UAAU;AACf,eAAK,SAAS;AAAA;AAElB,QAAAA,WAAU,UAAU,QAAQ,SAAU,OAAO;AACzC,eAAK,UAAU,KAAK,OAAO;AAC3B,eAAK,SAAS;AACd,eAAK,MAAK;AAAA;AAEd,QAAAA,WAAU,UAAU,MAAM,WAAY;AAClC,cAAI,KAAK;AACL,iBAAK,OAAM;AAAA;AAEnB,QAAAA,WAAU,UAAU,QAAQ,WAAY;AACpC,eAAK,UAAU;AAAA;AAEnB,QAAAA,WAAU,UAAU,SAAS,WAAY;AACrC,eAAK,UAAU;AACf,cAAI,KAAK,QAAQ,KAAK,OAAO,SAAS,KAAK,QAAQ;AAC/C,iBAAK,MAAK;AAAA,UACtB;AAAA;AAKI,QAAAA,WAAU,UAAU,WAAW,WAAY;AACvC,iBAAO,KAAK;AAAA;AAKhB,QAAAA,WAAU,UAAU,kBAAkB,WAAY;AAC9C,iBAAO,KAAK;AAAA;AAEhB,QAAAA,WAAU,UAAU,YAAY,SAAU,GAAG;AACzC,cAAI,MAAM,UAAU,MACf,CAAC,KAAK,kBAAkB,KAAK,cAAc,UAAU,EAAE,GAAI;AAC5D,gBAAI,KAAK,QAAQ,KAAK,cAAc;AAChC,mBAAK,IAAI,OAAO,KAAK,cAAc,KAAK,KAAK;AAAA,YAC7D;AACY,iBAAK,QAAQ,MAAM;AACnB,iBAAK,eAAe,KAAK;AAAA,UACrC,WACiB,KAAK,kBAAkB,MAAM,UAAU,KAAK;AACjD,iBAAK,QAAQ,MAAM;AAAA,UAC/B;AAAA;AAEI,QAAAA,WAAU,UAAU,4BAA4B,SAAU,GAAG;AACzD,cAAI,QAAQ,KAAK,kBAAkB,KAAK,gBAAgB;AACxD,cAAI,UAAU;AAAA;AAAA,YAEN,kBAAkB,CAAC;AAAA;AAAA;AAAA,aAElB,IAAI,QAAU,KAAK,gBAAgB,KAAK,aAAa;AAAA;AAC9D,cAAI,CAAC,SAAS;AACV,iBAAK,YAAY;AAAA,UAC7B,WACiB,CAAC,OAAO;AACb,iBAAK;AACL;AAAA,UACZ;AACQ,eAAK,gBAAgB;AACrB,eAAK,QAAQ,MAAM;AACnB,eAAK,eAAe,CAAC;AAAA;AAGzB,QAAAA,WAAU,UAAU,oBAAoB,SAAU,GAAG;AACjD,cAAI,KAAK,kBAAkB,KAAK,gBAAgB,QAAQ;AACpD,gBAAI,MAAM,UAAU,MAAM,aAAa,CAAC,GAAG;AACvC,kBAAI,YAAY,KAAK,QAAQ,KAAK,gBAAgB;AAClD,kBAAI,KAAK,eAAe,WAAW;AAE/B,oBAAI,cAAc,KAAK;AACvB,qBAAK,QAAQ;AACb,qBAAK,IAAI,OAAO,KAAK,cAAc,SAAS;AAC5C,qBAAK,QAAQ;AAAA,cACjC;AACgB,mBAAK,YAAY;AACjB,mBAAK,eAAe,YAAY;AAChC,mBAAK,sBAAsB,CAAC;AAC5B;AAAA,YAChB;AACY,iBAAK,gBAAgB;AAAA,UACjC;AACQ,eAAK,IAAI,QAAU,KAAK,gBAAgB,KAAK,aAAa,GAAG;AACzD,iBAAK,iBAAiB;AAAA,UAClC,WACiB,KAAK,kBAAkB,GAAG;AAC/B,gBAAI,KAAK,oBAAoB,UAAU,UAAU;AAE7C,kBAAI,KAAK,kBAAkB,MAAM,UAAU,KAAK;AAC5C,qBAAK,QAAQ,MAAM;AAAA,cACvC;AAAA,YACA,WACqB,KAAK,cAAc,UAAU,EAAE,GAAG;AAEvC,mBAAK,gBAAgB;AAAA,YACrC;AAAA,UACA,OACa;AAED,iBAAK,gBAAgB,OAAO,MAAM,UAAU,EAAE;AAAA,UAC1D;AAAA;AAEI,QAAAA,WAAU,UAAU,qBAAqB,SAAU,GAAG;AAClD,cAAI,MAAM,UAAU,MAAM,KAAK,aAAa,GAAG;AAC3C,gBAAI,EAAE,KAAK,kBAAkB,UAAU,MAAM,QAAQ;AACjD,mBAAK,QAAQ,MAAM;AACnB,mBAAK,kBAAkB,UAAU;AACjC,mBAAK,gBAAgB;AACrB,mBAAK,eAAe,KAAK,QAAQ;AAAA,YACjD;AAAA,UACA,OACa;AACD,iBAAK,gBAAgB;AACrB,iBAAK,QAAQ,MAAM;AACnB,iBAAK,mBAAmB,CAAC;AAAA,UACrC;AAAA;AAQI,QAAAA,WAAU,UAAU,gBAAgB,SAAU,GAAG;AAC7C,iBAAO,EAAE,KAAK,QAAQ,KAAK,OAAO,SAAS,KAAK,QAAQ;AACpD,gBAAI,KAAK,OAAO,WAAW,KAAK,QAAQ,KAAK,MAAM,MAAM,GAAG;AACxD,qBAAO;AAAA,YACvB;AAAA,UACA;AAOQ,eAAK,QAAQ,KAAK,OAAO,SAAS,KAAK,SAAS;AAChD,iBAAO;AAAA;AAUX,QAAAA,WAAU,UAAU,qBAAqB,SAAU,GAAG;AAClD,cAAI,MAAM,KAAK,gBAAgB,KAAK,aAAa,GAAG;AAChD,gBAAI,EAAE,KAAK,kBAAkB,KAAK,gBAAgB,QAAQ;AACtD,kBAAI,KAAK,oBAAoB,UAAU,UAAU;AAC7C,qBAAK,IAAI,QAAQ,KAAK,cAAc,KAAK,OAAO,CAAC;AAAA,cACrE,OACqB;AACD,qBAAK,IAAI,UAAU,KAAK,cAAc,KAAK,OAAO,CAAC;AAAA,cACvE;AACgB,mBAAK,gBAAgB;AACrB,mBAAK,eAAe,KAAK,QAAQ;AACjC,mBAAK,QAAQ,MAAM;AAAA,YACnC;AAAA,UACA,WACiB,KAAK,kBAAkB,GAAG;AAE/B,gBAAI,KAAK,cAAc,KAAK,gBAAgB,CAAC,CAAC,GAAG;AAC7C,mBAAK,gBAAgB;AAAA,YACrC;AAAA,UACA,WACiB,MAAM,KAAK,gBAAgB,KAAK,gBAAgB,CAAC,GAAG;AAEzD,iBAAK,gBAAgB;AAAA,UACjC;AAAA;AAQI,QAAAA,WAAU,UAAU,iBAAiB,SAAU,GAAG;AAC9C,iBAAO,KAAK,UAAU,CAAC,kBAAkB,CAAC,IAAI,aAAa,CAAC;AAAA;AAEhE,QAAAA,WAAU,UAAU,eAAe,SAAU,UAAU,QAAQ;AAC3D,eAAK,YAAY;AACjB,eAAK,kBAAkB;AACvB,eAAK,gBAAgB;AACrB,eAAK,QAAQ,MAAM;AAAA;AAEvB,QAAAA,WAAU,UAAU,qBAAqB,SAAU,GAAG;AAClD,cAAI,MAAM,UAAU,iBAAiB;AACjC,iBAAK,QAAQ,MAAM;AACnB,iBAAK,eAAe,KAAK,QAAQ;AAAA,UAC7C,WACiB,MAAM,UAAU,cAAc;AACnC,iBAAK,QAAQ,MAAM;AACnB,iBAAK,eAAe,KAAK,QAAQ;AAAA,UAC7C,WACiB,KAAK,eAAe,CAAC,GAAG;AAC7B,gBAAI,QAAQ,IAAI;AAChB,iBAAK,eAAe,KAAK;AACzB,gBAAI,CAAC,KAAK,WAAW,UAAU,UAAU,SAAS,CAAC,GAAG;AAClD,mBAAK,aAAa,UAAU,UAAU,CAAC;AAAA,YACvD,OACiB;AACD,mBAAK,QACD,CAAC,KAAK,WAAW,UAAU,UAAU,UAAU,CAAC,IAC1C,MAAM,iBACN,MAAM;AAAA,YAChC;AAAA,UACA,WACiB,MAAM,UAAU,OAAO;AAC5B,iBAAK,QAAQ,MAAM;AAAA,UAC/B,OACa;AACD,iBAAK,QAAQ,MAAM;AACnB,iBAAK,UAAU,CAAC;AAAA,UAC5B;AAAA;AAEI,QAAAA,WAAU,UAAU,iBAAiB,SAAU,GAAG;AAC9C,cAAI,kBAAkB,CAAC,GAAG;AACtB,iBAAK,IAAI,cAAc,KAAK,cAAc,KAAK,KAAK;AACpD,iBAAK,eAAe;AACpB,iBAAK,QAAQ,MAAM;AACnB,iBAAK,yBAAyB,CAAC;AAAA,UAC3C;AAAA;AAEI,QAAAA,WAAU,UAAU,4BAA4B,SAAU,GAAG;AACzD,cAAI,aAAa,CAAC;AAAG;AAAA,mBAGZ,MAAM,UAAU,IAAI;AACzB,iBAAK,QAAQ,MAAM;AAAA,UAC/B,OACa;AACD,iBAAK,QAAQ,KAAK,eAAe,CAAC,IAC5B,MAAM,mBACN,MAAM;AACZ,iBAAK,eAAe,KAAK;AAAA,UACrC;AAAA;AAEI,QAAAA,WAAU,UAAU,wBAAwB,SAAU,GAAG;AACrD,cAAI,MAAM,UAAU,MAAM,aAAa,CAAC,GAAG;AACvC,iBAAK,IAAI,WAAW,KAAK,cAAc,KAAK,KAAK;AACjD,iBAAK,eAAe;AACpB,iBAAK,QAAQ,MAAM;AACnB,iBAAK,yBAAyB,CAAC;AAAA,UAC3C;AAAA;AAEI,QAAAA,WAAU,UAAU,2BAA2B,SAAU,GAAG;AAExD,cAAI,MAAM,UAAU,MAAM,KAAK,cAAc,UAAU,EAAE,GAAG;AACxD,iBAAK,QAAQ,MAAM;AACnB,iBAAK,eAAe,KAAK,QAAQ;AAAA,UAC7C;AAAA;AAEI,QAAAA,WAAU,UAAU,2BAA2B,SAAU,GAAG;AACxD,cAAI,MAAM,UAAU,IAAI;AACpB,iBAAK,IAAI,aAAa,KAAK,KAAK;AAChC,gBAAI,KAAK,WAAW;AAChB,mBAAK,QAAQ,MAAM;AACnB,mBAAK,gBAAgB;AAAA,YACrC,OACiB;AACD,mBAAK,QAAQ,MAAM;AAAA,YACnC;AACY,iBAAK,YAAY,KAAK;AACtB,iBAAK,eAAe,KAAK,QAAQ;AAAA,UAC7C,WACiB,MAAM,UAAU,OAAO;AAC5B,iBAAK,QAAQ,MAAM;AAAA,UAC/B,WACiB,CAAC,aAAa,CAAC,GAAG;AACvB,iBAAK,QAAQ,MAAM;AACnB,iBAAK,eAAe,KAAK;AAAA,UACrC;AAAA;AAEI,QAAAA,WAAU,UAAU,wBAAwB,SAAU,GAAG;AACrD,cAAI,MAAM,UAAU,IAAI;AACpB,iBAAK,IAAI,iBAAiB,KAAK,KAAK;AACpC,iBAAK,QAAQ,MAAM;AACnB,iBAAK,YAAY,MAAM;AACvB,iBAAK,eAAe,KAAK,QAAQ;AACjC,iBAAK,YAAY;AAAA,UAC7B,WACiB,CAAC,aAAa,CAAC,GAAG;AACvB,iBAAK,QAAQ,MAAM;AACnB,iBAAK,yBAAyB,CAAC;AAAA,UAC3C;AAAA;AAEI,QAAAA,WAAU,UAAU,uBAAuB,SAAU,GAAG;AACpD,cAAI,MAAM,UAAU,MAAM,kBAAkB,CAAC,GAAG;AAC5C,iBAAK,IAAI,aAAa,KAAK,cAAc,KAAK,KAAK;AACnD,iBAAK,eAAe;AACpB,iBAAK,QAAQ,MAAM;AACnB,iBAAK,wBAAwB,CAAC;AAAA,UAC1C;AAAA;AAEI,QAAAA,WAAU,UAAU,0BAA0B,SAAU,GAAG;AACvD,cAAI,MAAM,UAAU,IAAI;AACpB,iBAAK,QAAQ,MAAM;AAAA,UAC/B,WACiB,MAAM,UAAU,SAAS,MAAM,UAAU,IAAI;AAClD,iBAAK,IAAI,YAAY,UAAU,SAAS,KAAK,KAAK;AAClD,iBAAK,QAAQ,MAAM;AACnB,iBAAK,yBAAyB,CAAC;AAAA,UAC3C,WACiB,CAAC,aAAa,CAAC,GAAG;AACvB,iBAAK,IAAI,YAAY,UAAU,SAAS,KAAK,KAAK;AAClD,iBAAK,QAAQ,MAAM;AACnB,iBAAK,eAAe,KAAK;AAAA,UACrC;AAAA;AAEI,QAAAA,WAAU,UAAU,4BAA4B,SAAU,GAAG;AACzD,cAAI,MAAM,UAAU,aAAa;AAC7B,iBAAK,QAAQ,MAAM;AACnB,iBAAK,eAAe,KAAK,QAAQ;AAAA,UAC7C,WACiB,MAAM,UAAU,aAAa;AAClC,iBAAK,QAAQ,MAAM;AACnB,iBAAK,eAAe,KAAK,QAAQ;AAAA,UAC7C,WACiB,CAAC,aAAa,CAAC,GAAG;AACvB,iBAAK,eAAe,KAAK;AACzB,iBAAK,QAAQ,MAAM;AACnB,iBAAK,8BAA8B,CAAC;AAAA,UAChD;AAAA;AAEI,QAAAA,WAAU,UAAU,yBAAyB,SAAU,GAAG,OAAO;AAC7D,cAAI,MAAM,SACL,CAAC,KAAK,kBAAkB,KAAK,cAAc,KAAK,GAAI;AACrD,iBAAK,IAAI,aAAa,KAAK,cAAc,KAAK,KAAK;AACnD,iBAAK,eAAe;AACpB,iBAAK,IAAI,YAAY,UAAU,UAAU,cACnC,UAAU,SACV,UAAU,QAAQ,KAAK,KAAK;AAClC,iBAAK,QAAQ,MAAM;AAAA,UAC/B,WACiB,KAAK,kBAAkB,MAAM,UAAU,KAAK;AACjD,iBAAK,YAAY,KAAK;AACtB,iBAAK,QAAQ,MAAM;AAAA,UAC/B;AAAA;AAEI,QAAAA,WAAU,UAAU,oCAAoC,SAAU,GAAG;AACjE,eAAK,uBAAuB,GAAG,UAAU,WAAW;AAAA;AAExD,QAAAA,WAAU,UAAU,oCAAoC,SAAU,GAAG;AACjE,eAAK,uBAAuB,GAAG,UAAU,WAAW;AAAA;AAExD,QAAAA,WAAU,UAAU,gCAAgC,SAAU,GAAG;AAC7D,cAAI,aAAa,CAAC,KAAK,MAAM,UAAU,IAAI;AACvC,iBAAK,IAAI,aAAa,KAAK,cAAc,KAAK,KAAK;AACnD,iBAAK,eAAe;AACpB,iBAAK,IAAI,YAAY,UAAU,UAAU,KAAK,KAAK;AACnD,iBAAK,QAAQ,MAAM;AACnB,iBAAK,yBAAyB,CAAC;AAAA,UAC3C,WACiB,KAAK,kBAAkB,MAAM,UAAU,KAAK;AACjD,iBAAK,YAAY,KAAK;AACtB,iBAAK,QAAQ,MAAM;AAAA,UAC/B;AAAA;AAEI,QAAAA,WAAU,UAAU,yBAAyB,SAAU,GAAG;AACtD,cAAI,MAAM,UAAU,sBAAsB;AACtC,iBAAK,QAAQ,MAAM;AACnB,iBAAK,gBAAgB;AAAA,UACjC,OACa;AACD,iBAAK,QACD,MAAM,UAAU,OACV,MAAM,gBACN,MAAM;AAAA,UAC5B;AAAA;AAEI,QAAAA,WAAU,UAAU,qBAAqB,SAAU,GAAG;AAClD,cAAI,MAAM,UAAU,MAAM,KAAK,cAAc,UAAU,EAAE,GAAG;AACxD,iBAAK,IAAI,cAAc,KAAK,cAAc,KAAK,KAAK;AACpD,iBAAK,QAAQ,MAAM;AACnB,iBAAK,eAAe,KAAK,QAAQ;AAAA,UAC7C;AAAA;AAEI,QAAAA,WAAU,UAAU,+BAA+B,SAAU,GAAG;AAC5D,cAAI,MAAM,UAAU,MAAM,KAAK,cAAc,UAAU,EAAE,GAAG;AACxD,iBAAK,IAAI,wBAAwB,KAAK,cAAc,KAAK,KAAK;AAC9D,iBAAK,QAAQ,MAAM;AACnB,iBAAK,eAAe,KAAK,QAAQ;AAAA,UAC7C;AAAA;AAEI,QAAAA,WAAU,UAAU,qBAAqB,SAAU,GAAG;AAClD,cAAI,MAAM,UAAU,MAAM;AACtB,iBAAK,QAAQ,MAAM;AACnB,iBAAK,kBAAkB,UAAU;AAEjC,iBAAK,gBAAgB;AACrB,iBAAK,eAAe,KAAK,QAAQ;AAAA,UAC7C,OACa;AACD,iBAAK,QAAQ,MAAM;AAAA,UAC/B;AAAA;AAEI,QAAAA,WAAU,UAAU,wBAAwB,SAAU,GAAG;AACrD,cAAI,MAAM,UAAU,MAAM,KAAK,cAAc,UAAU,EAAE,GAAG;AACxD,iBAAK,IAAI,UAAU,KAAK,cAAc,KAAK,OAAO,CAAC;AACnD,iBAAK,QAAQ,MAAM;AACnB,iBAAK,eAAe,KAAK,QAAQ;AAAA,UAC7C;AAAA;AAEI,QAAAA,WAAU,UAAU,sBAAsB,SAAU,GAAG;AACnD,cAAI,QAAQ,IAAI;AAChB,cAAI,UAAU,UAAU,UAAU,CAAC,GAAG;AAClC,iBAAK,aAAa,UAAU,WAAW,CAAC;AAAA,UACpD,WACiB,UAAU,UAAU,SAAS,CAAC,GAAG;AACtC,iBAAK,aAAa,UAAU,UAAU,CAAC;AAAA,UACnD,OACa;AACD,iBAAK,QAAQ,MAAM;AACnB,iBAAK,eAAe,CAAC;AAAA,UACjC;AAAA;AAEI,QAAAA,WAAU,UAAU,oBAAoB,SAAU,GAAG;AAEjD,eAAK,eAAe;AACpB,eAAK,eAAe;AACpB,cAAI,MAAM,UAAU,KAAK;AACrB,iBAAK,QAAQ,MAAM;AAAA,UAC/B,WACiB,MAAM,UAAU;AAAK;AAAA,eAGzB;AACD,iBAAK,YAAY;AACjB,iBAAK,cAAc,KAAK,WAAW,CAAC;AACpC,iBAAK,QAAQ,MAAM;AACnB,iBAAK,mBAAmB,CAAC;AAAA,UACrC;AAAA;AAEI,QAAAA,WAAU,UAAU,qBAAqB,SAAU,GAAG;AAClD,eAAK,gBAAgB;AACrB,eAAK,aAAY,GAAI,YAAY,iBAAiB,KAAK,YAAY,KAAK,aAAa,KAAK,YAAY,GAAG,CAAC;AAC1G,cAAI,KAAK,YAAY,GAAG;AACpB,iBAAK,gBAAe;AACpB,iBAAK;AACL;AAAA,UACZ;AACQ,eAAK,cAAc,KAAK,WAAW,KAAK,SAAS;AACjD,cAAI,SAAS,KAAK,cAAc,YAAY,aAAa;AAEzD,cAAI,QAAQ;AAER,gBAAI,eAAe,UAAU,MAAM;AAEnC,gBAAI,CAAC,KAAK,kBAAiB,KAAM,MAAM,UAAU,MAAM;AACnD,mBAAK,aAAa;AAAA,YAClC,OACiB;AAED,kBAAI,cAAc,KAAK,QAAQ,KAAK,eAAe;AACnD,kBAAI,cAAc,KAAK,cAAc;AACjC,qBAAK,YAAY,KAAK,cAAc,WAAW;AAAA,cACnE;AAEgB,mBAAK,eAAe,KAAK;AACzB,mBAAK,aAAa;AAClB,mBAAK,eAAe;AACpB,mBAAK,eAAe,KAAK,QAAQ;AACjC,kBAAI,gBAAgB,GAAG;AACnB,qBAAK,gBAAe;AAAA,cACxC;AAAA,YACA;AAAA,UACA;AAAA;AAEI,QAAAA,WAAU,UAAU,kBAAkB,WAAY;AAC9C,eAAK,QAAQ,KAAK;AAClB,cAAI,KAAK,iBAAiB,GAAG;AACzB;AAAA,UACZ;AACQ,cAAI,eAAe,KAAK,WAAW,KAAK,YAAY,IAAI,YAAY,aAAa,iBAC7E;AACJ,kBAAQ,aAAW;AAAA,YACf,KAAK;AACD,mBAAK,cAAc,KAAK,WAAW,KAAK,YAAY,IAChD,CAAC,YAAY,aAAa,YAAY;AAC1C;AAAA,YACJ,KAAK;AACD,mBAAK,cAAc,KAAK,WAAW,KAAK,eAAe,CAAC,CAAC;AACzD;AAAA,YACJ,KAAK,GAAG;AACJ,mBAAK,cAAc,KAAK,WAAW,KAAK,eAAe,CAAC,CAAC;AACzD,mBAAK,cAAc,KAAK,WAAW,KAAK,eAAe,CAAC,CAAC;AAAA,YACzE;AAAA,UACA;AAAA;AAEI,QAAAA,WAAU,UAAU,2BAA2B,SAAU,GAAG;AACxD,eAAK,IAAI,QAAU,UAAU,QAAQ;AACjC,iBAAK;AACL,iBAAK,QAAQ,MAAM;AAAA,UAC/B,OACa;AACD,iBAAK,QAAQ,MAAM;AACnB,iBAAK,qBAAqB,CAAC;AAAA,UACvC;AAAA;AAEI,QAAAA,WAAU,UAAU,oBAAoB,SAAU,QAAQ;AACtD,cAAI,cAAc,KAAK,QAAQ,KAAK,eAAe;AACnD,cAAI,cAAc,cAAc,IAAI,OAAO,KAAK,UAAU,MAAM,WAAW;AAC3E,cAAI,gBAAgB,KAAK,OAAO;AAE5B,gBAAI,cAAc,KAAK,cAAc;AACjC,mBAAK,YAAY,KAAK,cAAc,WAAW;AAAA,YAC/D;AACY,iBAAK,eAAe,KAAK,QAAQ,OAAO,MAAM;AAC9C,iBAAK,kBAAkB,YAAY,kBAAkB,KAAK,YAAY,CAAC;AAAA,UACnF;AACQ,eAAK,QAAQ,KAAK;AAAA;AAEtB,QAAAA,WAAU,UAAU,uBAAuB,SAAU,GAAG;AACpD,cAAI,MAAM,UAAU,MAAM;AACtB,iBAAK,kBAAkB,IAAI;AAAA,UACvC,WACiB,SAAS,CAAC,GAAG;AAClB,iBAAK,eAAe,KAAK,eAAe,MAAM,IAAI,UAAU;AAC5D,iBAAK;AAAA,UACjB,OACa;AACD,gBAAI,KAAK,qBAAqB;AAC1B,mBAAK,kBAAkB,KAAK;AAAA,YAC5C,OACiB;AACD,mBAAK,QAAQ,KAAK;AAAA,YAClC;AACY,iBAAK;AAAA,UACjB;AAAA;AAEI,QAAAA,WAAU,UAAU,mBAAmB,SAAU,GAAG;AAChD,cAAI,MAAM,UAAU,MAAM;AACtB,iBAAK,kBAAkB,IAAI;AAAA,UACvC,WACiB,SAAS,CAAC,GAAG;AAClB,iBAAK,eAAe,KAAK,eAAe,MAAM,IAAI,UAAU;AAC5D,iBAAK;AAAA,UACjB,WACiB,WAAW,CAAC,GAAG;AACpB,iBAAK,eACD,KAAK,eAAe,OAAO,IAAI,MAAQ,UAAU,SAAS;AAC9D,iBAAK;AAAA,UACjB,OACa;AACD,gBAAI,KAAK,qBAAqB;AAC1B,mBAAK,kBAAkB,KAAK;AAAA,YAC5C,OACiB;AACD,mBAAK,QAAQ,KAAK;AAAA,YAClC;AACY,iBAAK;AAAA,UACjB;AAAA;AAEI,QAAAA,WAAU,UAAU,oBAAoB,WAAY;AAChD,iBAAQ,CAAC,KAAK,YACT,KAAK,cAAc,MAAM,QACtB,KAAK,cAAc,MAAM;AAAA;AAKrC,QAAAA,WAAU,UAAU,UAAU,WAAY;AAEtC,cAAI,KAAK,WAAW,KAAK,iBAAiB,KAAK,OAAO;AAClD,gBAAI,KAAK,UAAU,MAAM,QACpB,KAAK,UAAU,MAAM,gBAAgB,KAAK,kBAAkB,GAAI;AACjE,mBAAK,IAAI,OAAO,KAAK,cAAc,KAAK,KAAK;AAC7C,mBAAK,eAAe,KAAK;AAAA,YACzC,WACqB,KAAK,UAAU,MAAM,sBAC1B,KAAK,UAAU,MAAM,sBACrB,KAAK,UAAU,MAAM,oBAAoB;AACzC,mBAAK,IAAI,aAAa,KAAK,cAAc,KAAK,KAAK;AACnD,mBAAK,eAAe,KAAK;AAAA,YACzC;AAAA,UACA;AAAA;AAEI,QAAAA,WAAU,UAAU,iBAAiB,WAAY;AAC7C,iBAAO,KAAK,QAAQ,KAAK,OAAO,SAAS,KAAK,UAAU,KAAK;AAAA;AAOjE,QAAAA,WAAU,UAAU,QAAQ,WAAY;AACpC,iBAAO,KAAK,kBAAkB;AAC1B,gBAAI,IAAI,KAAK,OAAO,WAAW,KAAK,QAAQ,KAAK,MAAM;AACvD,gBAAI,KAAK,UAAU,MAAM,MAAM;AAC3B,mBAAK,UAAU,CAAC;AAAA,YAChC,WACqB,KAAK,UAAU,MAAM,sBAAsB;AAChD,mBAAK,0BAA0B,CAAC;AAAA,YAChD,WACqB,KAAK,UAAU,MAAM,cAAc;AACxC,mBAAK,kBAAkB,CAAC;AAAA,YACxC,WACqB,KAAK,UAAU,MAAM,eAAe;AACzC,mBAAK,mBAAmB,CAAC;AAAA,YACzC,WACqB,KAAK,UAAU,MAAM,oBAAoB;AAC9C,mBAAK,kCAAkC,CAAC;AAAA,YACxD,WACqB,KAAK,UAAU,MAAM,iBAAiB;AAC3C,mBAAK,qBAAqB,CAAC;AAAA,YAC3C,WACqB,KAAK,UAAU,MAAM,eAAe;AACzC,mBAAK,mBAAmB,CAAC;AAAA,YACzC,WACqB,KAAK,UAAU,MAAM,kBAAkB;AAC5C,mBAAK,sBAAsB,CAAC;AAAA,YAC5C,WACqB,KAAK,UAAU,MAAM,qBAAqB;AAC/C,mBAAK,yBAAyB,CAAC;AAAA,YAC/C,WACqB,KAAK,UAAU,MAAM,WAAW;AACrC,mBAAK,eAAe,CAAC;AAAA,YACrC,WACqB,KAAK,UAAU,MAAM,kBAAkB;AAC5C,mBAAK,sBAAsB,CAAC;AAAA,YAC5C,WACqB,KAAK,UAAU,MAAM,eAAe;AACzC,mBAAK,mBAAmB,CAAC;AAAA,YACzC,WACqB,KAAK,UAAU,MAAM,oBAAoB;AAC9C,mBAAK,wBAAwB,CAAC;AAAA,YAC9C,WACqB,KAAK,UAAU,MAAM,oBAAoB;AAC9C,mBAAK,kCAAkC,CAAC;AAAA,YACxD,WACqB,KAAK,UAAU,MAAM,sBAAsB;AAChD,mBAAK,0BAA0B,CAAC;AAAA,YAChD,WACqB,KAAK,UAAU,MAAM,sBAAsB;AAChD,mBAAK,0BAA0B,CAAC;AAAA,YAChD,WACqB,KAAK,UAAU,MAAM,qBAAqB;AAC/C,mBAAK,yBAAyB,CAAC;AAAA,YAC/C,WACqB,KAAK,UAAU,MAAM,gBAAgB;AAC1C,mBAAK,oBAAoB,CAAC;AAAA,YAC1C,WACqB,KAAK,UAAU,MAAM,oBAAoB;AAC9C,mBAAK,8BAA8B,CAAC;AAAA,YACpD,WACqB,KAAK,UAAU,MAAM,kBAAkB;AAC5C,mBAAK,sBAAsB,CAAC;AAAA,YAC5C,WACqB,KAAK,UAAU,MAAM,eAAe;AACzC,mBAAK,mBAAmB,CAAC;AAAA,YACzC,WACqB,KAAK,UAAU,MAAM,mBAAmB;AAC7C,mBAAK,uBAAuB,CAAC;AAAA,YAC7C,WACqB,KAAK,UAAU,MAAM,eAAe;AACzC,mBAAK,mBAAmB,CAAC;AAAA,YACzC,WACqB,KAAK,UAAU,MAAM,yBAAyB;AACnD,mBAAK,6BAA6B,CAAC;AAAA,YACnD,WACqB,KAAK,UAAU,MAAM,eAAe;AACzC,mBAAK,mBAAmB,CAAC;AAAA,YACzC,WACqB,KAAK,UAAU,MAAM,cAAc;AACxC,mBAAK,kBAAkB,CAAC;AAAA,YACxC,WACqB,KAAK,UAAU,MAAM,aAAa;AACvC,mBAAK,iBAAiB,CAAC;AAAA,YACvC,WACqB,KAAK,UAAU,MAAM,iBAAiB;AAC3C,mBAAK,qBAAqB,CAAC;AAAA,YAC3C,OACiB;AAED,mBAAK,yBAAyB,CAAC;AAAA,YAC/C;AACY,iBAAK;AAAA,UACjB;AACQ,eAAK,QAAO;AAAA;AAEhB,QAAAA,WAAU,UAAU,SAAS,WAAY;AACrC,cAAI,KAAK,UAAU,MAAM,eAAe;AACpC,iBAAK,gBAAe;AAAA,UAChC;AAEQ,cAAI,KAAK,eAAe,KAAK,OAAO;AAChC,iBAAK,mBAAkB;AAAA,UACnC;AACQ,eAAK,IAAI;;AAGb,QAAAA,WAAU,UAAU,qBAAqB,WAAY;AACjD,cAAI,WAAW,KAAK,OAAO,SAAS,KAAK;AACzC,cAAI,KAAK,UAAU,MAAM,eAAe;AACpC,gBAAI,KAAK,oBAAoB,UAAU,UAAU;AAC7C,mBAAK,IAAI,QAAQ,KAAK,cAAc,UAAU,CAAC;AAAA,YAC/D,OACiB;AACD,mBAAK,IAAI,UAAU,KAAK,cAAc,UAAU,CAAC;AAAA,YACjE;AAAA,UACA,WACiB,KAAK,UAAU,MAAM,mBAC1B,KAAK,kBAAiB,GAAI;AAC1B,iBAAK,kBAAkB,KAAK;AAAA,UAExC,WACiB,KAAK,UAAU,MAAM,eAC1B,KAAK,kBAAiB,GAAI;AAC1B,iBAAK,kBAAkB,KAAK;AAAA,UAExC,WACiB,KAAK,UAAU,MAAM,aAC1B,KAAK,UAAU,MAAM,uBACrB,KAAK,UAAU,MAAM,wBACrB,KAAK,UAAU,MAAM,sBACrB,KAAK,UAAU,MAAM,mBACrB,KAAK,UAAU,MAAM,sBACrB,KAAK,UAAU,MAAM,sBACrB,KAAK,UAAU,MAAM,sBACrB,KAAK,UAAU,MAAM;AAAkB;AAAA,eAMtC;AACD,iBAAK,IAAI,OAAO,KAAK,cAAc,QAAQ;AAAA,UACvD;AAAA;AAEI,QAAAA,WAAU,UAAU,cAAc,SAAU,OAAO,UAAU;AACzD,cAAI,KAAK,cAAc,MAAM,QACzB,KAAK,cAAc,MAAM,cAAc;AACvC,iBAAK,IAAI,aAAa,OAAO,QAAQ;AAAA,UACjD,OACa;AACD,iBAAK,IAAI,OAAO,OAAO,QAAQ;AAAA,UAC3C;AAAA;AAEI,QAAAA,WAAU,UAAU,gBAAgB,SAAU,IAAI;AAC9C,cAAI,KAAK,cAAc,MAAM,QACzB,KAAK,cAAc,MAAM,cAAc;AACvC,iBAAK,IAAI,eAAe,EAAE;AAAA,UACtC,OACa;AACD,iBAAK,IAAI,aAAa,EAAE;AAAA,UACpC;AAAA;AAEI,eAAOA;AAAA,MACV,EAAA;AAAA;AACD,IAAAC,QAAiB,UAAA;AAAA,MACf,SAAQ;AAAA,MACR;AAAA,IACF;AAAA;;;;"}