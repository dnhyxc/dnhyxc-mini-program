{"version":3,"file":"index.js","sources":["wxcomponents/towxml/parse/parse2/domelementtype/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;\n/** Types of elements found in htmlparser2's DOM */\nvar ElementType;\n(function (ElementType) {\n    /** Type for the root element of a document */\n    ElementType[\"Root\"] = \"root\";\n    /** Type for Text */\n    ElementType[\"Text\"] = \"text\";\n    /** Type for <? ... ?> */\n    ElementType[\"Directive\"] = \"directive\";\n    /** Type for <!-- ... --> */\n    ElementType[\"Comment\"] = \"comment\";\n    /** Type for <script> tags */\n    ElementType[\"Script\"] = \"script\";\n    /** Type for <style> tags */\n    ElementType[\"Style\"] = \"style\";\n    /** Type for Any tag */\n    ElementType[\"Tag\"] = \"tag\";\n    /** Type for <![CDATA[ ... ]]> */\n    ElementType[\"CDATA\"] = \"cdata\";\n    /** Type for <!doctype ...> */\n    ElementType[\"Doctype\"] = \"doctype\";\n})(ElementType = exports.ElementType || (exports.ElementType = {}));\n/**\n * Tests whether an element is a tag or not.\n *\n * @param elem Element to test\n */\nfunction isTag(elem) {\n    return (elem.type === ElementType.Tag ||\n        elem.type === ElementType.Script ||\n        elem.type === ElementType.Style);\n}\nexports.isTag = isTag;\n// Exports for backwards compatibility\n/** Type for the root element of a document */\nexports.Root = ElementType.Root;\n/** Type for Text */\nexports.Text = ElementType.Text;\n/** Type for <? ... ?> */\nexports.Directive = ElementType.Directive;\n/** Type for <!-- ... --> */\nexports.Comment = ElementType.Comment;\n/** Type for <script> tags */\nexports.Script = ElementType.Script;\n/** Type for <style> tags */\nexports.Style = ElementType.Style;\n/** Type for Any tag */\nexports.Tag = ElementType.Tag;\n/** Type for <![CDATA[ ... ]]> */\nexports.CDATA = ElementType.CDATA;\n/** Type for <!doctype ...> */\nexports.Doctype = ElementType.Doctype;\n"],"names":["exports","ElementType"],"mappings":";;;;;;;;AACA,WAAO,eAAcA,UAAU,cAAc,EAAE,OAAO,KAAI,CAAE;AAC5D,IAAAA,SAAkB,UAAAA,SAAA,QAAgBA,SAAc,MAAAA,SAAA,QAAgBA,SAAiB,SAAAA,SAAA,UAAkBA,SAAoB,YAAAA,SAAA,OAAeA,SAAe,OAAAA,SAAA,QAAgBA,SAAsB,cAAA;AAE3L,QAAI;AACJ,KAAC,SAAUC,cAAa;AAEpB,MAAAA,aAAY,MAAM,IAAI;AAEtB,MAAAA,aAAY,MAAM,IAAI;AAEtB,MAAAA,aAAY,WAAW,IAAI;AAE3B,MAAAA,aAAY,SAAS,IAAI;AAEzB,MAAAA,aAAY,QAAQ,IAAI;AAExB,MAAAA,aAAY,OAAO,IAAI;AAEvB,MAAAA,aAAY,KAAK,IAAI;AAErB,MAAAA,aAAY,OAAO,IAAI;AAEvB,MAAAA,aAAY,SAAS,IAAI;AAAA,OAC1B,cAAcD,SAAQ,gBAAgBA,SAAA,cAAsB,CAAE,EAAC;AAMlE,aAAS,MAAM,MAAM;AACjB,aAAQ,KAAK,SAAS,YAAY,OAC9B,KAAK,SAAS,YAAY,UAC1B,KAAK,SAAS,YAAY;AAAA,IAClC;AACA,IAAAA,SAAA,QAAgB;AAGhB,IAAAA,SAAe,OAAA,YAAY;AAE3B,IAAAA,SAAe,OAAA,YAAY;AAE3B,IAAAA,SAAoB,YAAA,YAAY;AAEhC,IAAAA,SAAkB,UAAA,YAAY;AAE9B,IAAAA,SAAiB,SAAA,YAAY;AAE7B,IAAAA,SAAgB,QAAA,YAAY;AAE5B,IAAAA,SAAc,MAAA,YAAY;AAE1B,IAAAA,SAAgB,QAAA,YAAY;AAE5B,IAAAA,SAAkB,UAAA,YAAY;AAAA;;;;"}