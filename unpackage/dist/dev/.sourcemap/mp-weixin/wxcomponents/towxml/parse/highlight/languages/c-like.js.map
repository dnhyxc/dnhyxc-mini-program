{"version":3,"file":"c-like.js","sources":["wxcomponents/towxml/parse/highlight/languages/c-like.js"],"sourcesContent":["/*\nLanguage: C-like foundation grammar for C/C++ grammars\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nContributors: Evgeny Stepanischev <imbolk@gmail.com>, Zaven Muradyan <megalivoithos@gmail.com>, Roel Deckers <admin@codingcat.nl>, Sam Wu <samsam2310@gmail.com>, Jordi Petit <jordi.petit@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, Google Inc. (David Benjamin) <davidben@google.com>\nCategory: common, system\n*/\n\n/* In the future the intention is to split out the C/C++ grammars distinctly\nsince they are separate languages.  They will likely share a common foundation\nthough, and this file sets the groundwork for that - so that we get the breaking\nchange in v10 and don't have to change the requirements again later.\n\nSee: https://github.com/highlightjs/highlight.js/issues/2146\n*/\n\nexport default function(hljs) {\n  function optional(s) {\n    return '(?:' + s + ')?';\n  }\n  var DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)'\n  var NAMESPACE_RE = '[a-zA-Z_]\\\\w*::'\n  var TEMPLATE_ARGUMENT_RE = '<.*?>';\n  var FUNCTION_TYPE_RE = '(' +\n    DECLTYPE_AUTO_RE + '|' +\n    optional(NAMESPACE_RE) +'[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\n  ')';\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  var CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)'\n  var STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"', end: '\"',\n        illegal: '\\\\n',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\", end: '\\'',\n        illegal: '.'\n      },\n      { begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\((?:.|\\n)*?\\)\\1\"/ }\n    ]\n  };\n\n  var NUMBERS = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0b[01\\']+)' },\n      { begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)' },\n      { begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)' }\n    ],\n    relevance: 0\n  };\n\n  var PREPROCESSOR =       {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/, end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/, relevance: 0\n      },\n      hljs.inherit(STRINGS, {className: 'meta-string'}),\n      {\n        className: 'meta-string',\n        begin: /<.*?>/, end: /$/,\n        illegal: '\\\\n',\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  var TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  var FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  var CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using asm case typeid wchar_t ' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +\n      'concept co_await co_return co_yield requires ' +\n      'noexcept static_assert thread_local restrict final override ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return ' +\n      'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap array shared_ptr abort terminate abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary',\n    literal: 'true false nullptr NULL'\n  };\n\n  var EXPRESSION_CONTAINS = [\n    CPP_PRIMITIVE_TYPES,\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  var EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {begin: /=/, end: /;/},\n      {begin: /\\(/, end: /\\)/},\n      {beginKeywords: 'new throw return else', end: /;/}\n    ],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/, end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat(['self']),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  var FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true, end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>]/,\n    contains: [\n\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n      },\n      {\n        begin: FUNCTION_TITLE, returnBegin: true,\n        contains: [TITLE_MODE],\n        relevance: 0\n      },\n      {\n        className: 'params',\n        begin: /\\(/, end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          CPP_PRIMITIVE_TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/, end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES\n            ]\n          }\n        ]\n      },\n      CPP_PRIMITIVE_TYPES,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    // the base c-like language will NEVER be auto-detected, rather the\n    // derivitives: c, c++, arduino turn auto-detect back on for themselves\n    disableAutodetect: true,\n    illegal: '</',\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      EXPRESSION_CONTAINS,\n      [\n      PREPROCESSOR,\n      {\n        begin: '\\\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<', end: '>',\n        keywords: CPP_KEYWORDS,\n        contains: ['self', CPP_PRIMITIVE_TYPES]\n      },\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: CPP_KEYWORDS\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class struct', end: /[{;:]/,\n        contains: [\n          {begin: /</, end: />/, contains: ['self']}, // skip generic stuff\n          hljs.TITLE_MODE\n        ]\n      }\n    ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n}\n"],"names":[],"mappings":"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"}