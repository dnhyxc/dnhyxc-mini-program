{"version":3,"file":"index.js","sources":["wxcomponents/towxml/parse/index.js"],"sourcesContent":["const parse2 = require('./parse2/index'),\n    // parse5 = require('./parse5/index').parse,\n    config = require('../config'),\n\n    // html与wxml转换关系\n    correspondTag = (()=>{\n        let result = {\n                a:'navigator',\n                todogroup:'checkbox-group',\n                audio:'audio-player'\n            };\n        \n        // 该系列的标签都转换为text\n        // ['span','b','strong','i','em','code','sub','sup','g-emoji','mark','ins','u'].forEach(item => {\n        //     result[item] = 'text';\n        // });\n\n        // 该系列小程序原生tag，不需转换\n        [...config.wxml,...config.components].forEach(item => {\n            result[item] = item;\n        });\n        return result;\n    })(),\n\n    // 元素与html对应的wxml标签名\n    getWxmlTag = tagStr => !tagStr ? undefined : correspondTag[tagStr] || 'view',\n\n    // 依赖父级的元素\n    relyList = ['li'],\n\n    // 精简数据，并初始化相关事件等\n    initObj = (obj,option)=>{\n        const result = {\n                theme:option.theme || 'light',\n                _e:{}\n            },\n            events = global._events = {},\n            base = option.base;\n\n        // 主题保存到全局\n        global._theme = result.theme;\n\n        // 事件添加到全局中，各个组件在触发事件时会从全局调用\n        if(option.events){\n            for(let key in option.events){\n                events[key] = option.events[key];\n            };\n        };\n\n        // 遍历原始数据，处理成能解析的数据\n        let eachFn;\n        (eachFn = (arr,obj,_e,isRichTextContent) => {\n            obj.children = obj.children || [];\n            _e.child = _e.child || [];\n            let child = obj.children,\n                child_e = _e.child;\n            \n            arr.forEach(item => {\n                if(item.type === 'comment'){\n                    return;\n                };\n                let o = {\n                        type:item.type === 'text' ? 'text' : isRichTextContent ? 'node' : item.type\n                    },\n                    e = {},\n                    attrs = o.attrs = item.attribs || {};\n                if(item.type === 'text'){\n                    o.text = e.text = item.data;\n                }else{\n                    if(isRichTextContent){\n                        o.name = item.name;\n                    }else{\n                        o.tag = getWxmlTag(item.name);      // 转换之后的标签\n                        // o.tag = o.tag === 'text' ? 'view' : o.tag;\n                        e.tag = item.name;                  // 原始\n                        o.attrs = item.attribs;\n                        e.attrs = JSON.parse(JSON.stringify(attrs));\n                    };\n                    attrs.class = attrs.class ? `h2w__${item.name} ${attrs.class}` : `h2w__${item.name}`;\n                    \n                    // 处理资源相对路径\n                    if(base && attrs.src){\n                        let src = attrs.src;\n                        switch (src.indexOf('//')) {\n                            case 0:\n                                attrs.src = `https:${src}`;\n                            break;\n                            case -1:\n                                attrs.src = `${base}${src}`;\n                            break;\n                        };\n                    };\n                };\n\n                o.rely = relyList.indexOf(e.tag) > -1;      // 判断是否不能嵌套其它标签\n                \n                if(item.children){\n                    eachFn(item.children,o,e,isRichTextContent || item.name === 'rich-text');\n                };\n                child.push(o);\n                child_e.push(e);\n            });\n        })(obj,result,result._e,false);\n        return result;\n    };\n\nmodule.exports = (str,option) => {\n    str = (()=>{\n        let re = /<body[^>]*>([\\s\\S]*)<\\/body>/i;\n        if(re.test(str)){\n            let result = re.exec(str);\n            return result[1] || str;\n        }else{\n            return str;\n        };\n    })();\n    return initObj(parse2(str,{decodeEntities:true}),option);\n};"],"names":["require$$0","require$$1","global","obj"],"mappings":";;;;;;;;;;AAAA,QAAM,SAASA,uCAAAA,cAAyB,GAEpC,SAASC,2BAAAA,cAAoB,GAG7B,iBAAiB,MAAI;AACjB,QAAI,SAAS;AAAA,MACL,GAAE;AAAA,MACF,WAAU;AAAA,MACV,OAAM;AAAA;AASd,KAAC,GAAG,OAAO,MAAK,GAAG,OAAO,UAAU,EAAE,QAAQ,UAAQ;AAClD,aAAO,IAAI,IAAI;AAAA,IAC3B,CAAS;AACD,WAAO;AAAA,EACf,GAAQ,GAGJ,aAAa,YAAU,CAAC,SAAS,SAAY,cAAc,MAAM,KAAK,QAGtE,WAAW,CAAC,IAAI,GAGhB,UAAU,CAAC,KAAI,WAAS;AACpB,UAAM,SAAS;AAAA,MACP,OAAM,OAAO,SAAS;AAAA,MACtB,IAAG,CAAA;AAAA,IACN,GACD,SAASC,cAAAA,eAAO,UAAU,CAAE,GAC5B,OAAO,OAAO;AAGlBA,iCAAO,SAAS,OAAO;AAGvB,QAAG,OAAO,QAAO;AACb,eAAQ,OAAO,OAAO,QAAO;AACzB,eAAO,GAAG,IAAI,OAAO,OAAO,GAAG;AAAA;;AAKvC,QAAI;AACJ,KAAC,SAAS,CAAC,KAAIC,MAAI,IAAG,sBAAsB;AACxC,MAAAA,KAAI,WAAWA,KAAI,YAAY,CAAA;AAC/B,SAAG,QAAQ,GAAG,SAAS,CAAA;AACvB,UAAI,QAAQA,KAAI,UACZ,UAAU,GAAG;AAEjB,UAAI,QAAQ,UAAQ;AAChB,YAAG,KAAK,SAAS,WAAU;AACvB;AAAA;AAEJ,YAAI,IAAI;AAAA,UACA,MAAK,KAAK,SAAS,SAAS,SAAS,oBAAoB,SAAS,KAAK;AAAA,QAC1E,GACD,IAAI,CAAE,GACN,QAAQ,EAAE,QAAQ,KAAK,WAAW,CAAA;AACtC,YAAG,KAAK,SAAS,QAAO;AACpB,YAAE,OAAO,EAAE,OAAO,KAAK;AAAA,QAC3C,OAAqB;AACD,cAAG,mBAAkB;AACjB,cAAE,OAAO,KAAK;AAAA,UACtC,OAAyB;AACD,cAAE,MAAM,WAAW,KAAK,IAAI;AAE5B,cAAE,MAAM,KAAK;AACb,cAAE,QAAQ,KAAK;AACf,cAAE,QAAQ,KAAK,MAAM,KAAK,UAAU,KAAK,CAAC;AAAA;AAE9C,gBAAM,QAAQ,MAAM,QAAQ,QAAQ,KAAK,IAAI,IAAI,MAAM,KAAK,KAAK,QAAQ,KAAK,IAAI;AAGlF,cAAG,QAAQ,MAAM,KAAI;AACjB,gBAAI,MAAM,MAAM;AAChB,oBAAQ,IAAI,QAAQ,IAAI,GAAC;AAAA,cACrB,KAAK;AACD,sBAAM,MAAM,SAAS,GAAG;AAC5B;AAAA,cACA,KAAK;AACD,sBAAM,MAAM,GAAG,IAAI,GAAG,GAAG;AAC7B;AAAA;;;AAKZ,UAAE,OAAO,SAAS,QAAQ,EAAE,GAAG,IAAI;AAEnC,YAAG,KAAK,UAAS;AACb,iBAAO,KAAK,UAAS,GAAE,GAAE,qBAAqB,KAAK,SAAS,WAAW;AAAA;AAE3E,cAAM,KAAK,CAAC;AACZ,gBAAQ,KAAK,CAAC;AAAA,MAC9B,CAAa;AAAA,IACJ,GAAE,KAAI,QAAO,OAAO,IAAG,KAAK;AAC7B,WAAO;AAAA;AAGf,UAAiB,CAAC,KAAI,WAAW;AAC7B,WAAO,MAAI;AACP,UAAI,KAAK;AACT,UAAG,GAAG,KAAK,GAAG,GAAE;AACZ,YAAI,SAAS,GAAG,KAAK,GAAG;AACxB,eAAO,OAAO,CAAC,KAAK;AAAA,MAChC,OAAa;AACD,eAAO;AAAA,MAEnB;AAAA,IAAA;AACI,WAAO,QAAQ,OAAO,KAAI,EAAC,gBAAe,KAAI,CAAC,GAAE,MAAM;AAAA;;;;"}