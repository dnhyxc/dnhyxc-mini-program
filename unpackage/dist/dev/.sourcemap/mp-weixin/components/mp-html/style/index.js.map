{"version":3,"file":"index.js","sources":["components/mp-html/style/index.js"],"sourcesContent":["/**\r\n * @fileoverview style 插件\r\n */\r\n// #ifndef APP-PLUS-NVUE\r\nimport Parser from './parser'\r\n// #endif\r\n\r\nfunction Style () {\r\n  this.styles = []\r\n}\r\n\r\n// #ifndef APP-PLUS-NVUE\r\nStyle.prototype.onParse = function (node, vm) {\r\n  // 获取样式\r\n  if (node.name === 'style' && node.children.length && node.children[0].type === 'text') {\r\n    this.styles = this.styles.concat(new Parser().parse(node.children[0].text))\r\n  } else if (node.name) {\r\n    // 匹配样式（对非文本标签）\r\n    // 存储不同优先级的样式 name < class < id < 后代\r\n    let matched = ['', '', '', '']\r\n    for (let i = 0, len = this.styles.length; i < len; i++) {\r\n      const item = this.styles[i]\r\n      let res = match(node, item.key || item.list[item.list.length - 1])\r\n      let j\r\n      if (res) {\r\n        // 后代选择器\r\n        if (!item.key) {\r\n          j = item.list.length - 2\r\n          for (let k = vm.stack.length; j >= 0 && k--;) {\r\n            // 子选择器\r\n            if (item.list[j] === '>') {\r\n              // 错误情况\r\n              if (j < 1 || j > item.list.length - 2) break\r\n              if (match(vm.stack[k], item.list[j - 1])) {\r\n                j -= 2\r\n              } else {\r\n                j++\r\n              }\r\n            } else if (match(vm.stack[k], item.list[j])) {\r\n              j--\r\n            }\r\n          }\r\n          res = 4\r\n        }\r\n        if (item.key || j < 0) {\r\n          // 添加伪类\r\n          if (item.pseudo && node.children) {\r\n            let text\r\n            item.style = item.style.replace(/content:([^;]+)/, (_, $1) => {\r\n              text = $1.replace(/['\"]/g, '')\r\n                // 处理 attr 函数\r\n                .replace(/attr\\((.+?)\\)/, (_, $1) => node.attrs[$1.trim()] || '')\r\n                // 编码 \\xxx\r\n                .replace(/\\\\(\\w{4})/, (_, $1) => String.fromCharCode(parseInt($1, 16)))\r\n              return ''\r\n            })\r\n            const pseudo = {\r\n              name: 'span',\r\n              attrs: {\r\n                style: item.style\r\n              },\r\n              children: [{\r\n                type: 'text',\r\n                text\r\n              }]\r\n            }\r\n            if (item.pseudo === 'before') {\r\n              node.children.unshift(pseudo)\r\n            } else {\r\n              node.children.push(pseudo)\r\n            }\r\n          } else {\r\n            matched[res - 1] += item.style + (item.style[item.style.length - 1] === ';' ? '' : ';')\r\n          }\r\n        }\r\n      }\r\n    }\r\n    matched = matched.join('')\r\n    if (matched.length > 2) {\r\n      node.attrs.style = matched + (node.attrs.style || '')\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @description 匹配样式\r\n * @param {object} node 要匹配的标签\r\n * @param {string|string[]} keys 选择器\r\n * @returns {number} 0：不匹配；1：name 匹配；2：class 匹配；3：id 匹配\r\n */\r\nfunction match (node, keys) {\r\n  function matchItem (key) {\r\n    if (key[0] === '#') {\r\n      // 匹配 id\r\n      if (node.attrs.id && node.attrs.id.trim() === key.substr(1)) return 3\r\n    } else if (key[0] === '.') {\r\n      // 匹配 class\r\n      key = key.substr(1)\r\n      const selectors = (node.attrs.class || '').split(' ')\r\n      for (let i = 0; i < selectors.length; i++) {\r\n        if (selectors[i].trim() === key) return 2\r\n      }\r\n    } else if (node.name === key) {\r\n      // 匹配 name\r\n      return 1\r\n    }\r\n    return 0\r\n  }\r\n\r\n  // 多选择器交集\r\n  if (keys instanceof Array) {\r\n    let res = 0\r\n    for (let j = 0; j < keys.length; j++) {\r\n      const tmp = matchItem(keys[j])\r\n      // 任意一个不匹配就失败\r\n      if (!tmp) return 0\r\n      // 优先级最大的一个作为最终优先级\r\n      if (tmp > res) {\r\n        res = tmp\r\n      }\r\n    }\r\n    return res\r\n  }\r\n\r\n  return matchItem(keys)\r\n}\r\n// #endif\r\n\r\nexport default Style\r\n"],"names":["Parser","_","$1"],"mappings":"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"}